
ELEC3117.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001588  0000161c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080016e  0080016e  0000168a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c51  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c0  00000000  00000000  0000344b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ef  00000000  00000000  0000390b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b8  00000000  00000000  000040fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  000043b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b20  00000000  00000000  00004793  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  000052b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e8       	ldi	r30, 0x88	; 136
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 36       	cpi	r26, 0x6E	; 110
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e6       	ldi	r26, 0x6E	; 110
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 37       	cpi	r26, 0x70	; 112
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9e 02 	call	0x53c	; 0x53c <main>
      9e:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pinChange>:
	pinChange(D4,1);
	else
	pinChange(D4,0);

	if(a & 32)
	pinChange(D5,1);
      a6:	67 2b       	or	r22, r23
      a8:	09 f0       	breq	.+2      	; 0xac <pinChange+0x6>
      aa:	73 c0       	rjmp	.+230    	; 0x192 <pinChange+0xec>
	else
	pinChange(D5,0);
      ac:	8a 30       	cpi	r24, 0x0A	; 10
      ae:	91 05       	cpc	r25, r1
      b0:	11 f4       	brne	.+4      	; 0xb6 <pinChange+0x10>
      b2:	28 98       	cbi	0x05, 0	; 5
      b4:	08 95       	ret
      b6:	8b 30       	cpi	r24, 0x0B	; 11
	
	if(a & 64)
      b8:	91 05       	cpc	r25, r1
      ba:	11 f4       	brne	.+4      	; 0xc0 <pinChange+0x1a>
	pinChange(D6,1);
      bc:	29 98       	cbi	0x05, 1	; 5
      be:	08 95       	ret
      c0:	8c 30       	cpi	r24, 0x0C	; 12
      c2:	91 05       	cpc	r25, r1
      c4:	11 f4       	brne	.+4      	; 0xca <pinChange+0x24>
      c6:	2a 98       	cbi	0x05, 2	; 5
      c8:	08 95       	ret
	else
	pinChange(D6,0);
      ca:	8d 30       	cpi	r24, 0x0D	; 13
      cc:	91 05       	cpc	r25, r1
      ce:	11 f4       	brne	.+4      	; 0xd4 <pinChange+0x2e>
      d0:	2b 98       	cbi	0x05, 3	; 5
      d2:	08 95       	ret
      d4:	8e 30       	cpi	r24, 0x0E	; 14
	
	if(a & 128)
      d6:	91 05       	cpc	r25, r1
      d8:	11 f4       	brne	.+4      	; 0xde <pinChange+0x38>
	pinChange(D7,1);
      da:	2c 98       	cbi	0x05, 4	; 5
      dc:	08 95       	ret
      de:	8f 30       	cpi	r24, 0x0F	; 15
      e0:	91 05       	cpc	r25, r1
      e2:	11 f4       	brne	.+4      	; 0xe8 <pinChange+0x42>
      e4:	2d 98       	cbi	0x05, 5	; 5
      e6:	08 95       	ret
	else
	pinChange(D7,0);
      e8:	80 31       	cpi	r24, 0x10	; 16
      ea:	91 05       	cpc	r25, r1
      ec:	11 f4       	brne	.+4      	; 0xf2 <pinChange+0x4c>
      ee:	2e 98       	cbi	0x05, 6	; 5
      f0:	08 95       	ret
      f2:	81 31       	cpi	r24, 0x11	; 17
}
      f4:	91 05       	cpc	r25, r1
      f6:	11 f4       	brne	.+4      	; 0xfc <pinChange+0x56>
		else if(a == eS_PORTB5)
		  PORTB &= ~(1<<PB5);  
		else if(a == eS_PORTB6)
		  PORTB &= ~(1<<PB6);  
		else if(a == eS_PORTB7)
		  PORTB &= ~(1<<PB7);
      f8:	2f 98       	cbi	0x05, 7	; 5
      fa:	08 95       	ret
		else if(a == eS_PORTC0)
      fc:	84 31       	cpi	r24, 0x14	; 20
      fe:	91 05       	cpc	r25, r1
     100:	11 f4       	brne	.+4      	; 0x106 <pinChange+0x60>
		  PORTC &= ~(1<<PC0);   
     102:	40 98       	cbi	0x08, 0	; 8
     104:	08 95       	ret
		else if(a == eS_PORTC1)
     106:	85 31       	cpi	r24, 0x15	; 21
     108:	91 05       	cpc	r25, r1
     10a:	11 f4       	brne	.+4      	; 0x110 <pinChange+0x6a>
		  PORTC &= ~(1<<PC1); 
     10c:	41 98       	cbi	0x08, 1	; 8
     10e:	08 95       	ret
		else if(a == eS_PORTC2)
     110:	86 31       	cpi	r24, 0x16	; 22
     112:	91 05       	cpc	r25, r1
     114:	11 f4       	brne	.+4      	; 0x11a <pinChange+0x74>
		  PORTC &= ~(1<<PC2);
     116:	42 98       	cbi	0x08, 2	; 8
     118:	08 95       	ret
		else if(a == eS_PORTC3)
     11a:	87 31       	cpi	r24, 0x17	; 23
     11c:	91 05       	cpc	r25, r1
     11e:	11 f4       	brne	.+4      	; 0x124 <pinChange+0x7e>
		  PORTC &= ~(1<<PC3);   
     120:	43 98       	cbi	0x08, 3	; 8
     122:	08 95       	ret
		else if(a == eS_PORTC4)
     124:	88 31       	cpi	r24, 0x18	; 24
     126:	91 05       	cpc	r25, r1
     128:	11 f4       	brne	.+4      	; 0x12e <pinChange+0x88>
		  PORTC &= ~(1<<PC4);  
     12a:	44 98       	cbi	0x08, 4	; 8
     12c:	08 95       	ret
		else if(a == eS_PORTC5)
     12e:	89 31       	cpi	r24, 0x19	; 25
     130:	91 05       	cpc	r25, r1
     132:	11 f4       	brne	.+4      	; 0x138 <pinChange+0x92>
		  PORTC &= ~(1<<PC5);  
     134:	45 98       	cbi	0x08, 5	; 8
     136:	08 95       	ret
        else if(a == eS_PORTC6)
     138:	8a 31       	cpi	r24, 0x1A	; 26
     13a:	91 05       	cpc	r25, r1
     13c:	11 f4       	brne	.+4      	; 0x142 <pinChange+0x9c>
          PORTC &= ~(1<<PC6);		
     13e:	46 98       	cbi	0x08, 6	; 8
     140:	08 95       	ret
		else if(a == eS_PORTD0)
     142:	8e 31       	cpi	r24, 0x1E	; 30
     144:	91 05       	cpc	r25, r1
     146:	11 f4       	brne	.+4      	; 0x14c <pinChange+0xa6>
		  PORTD &= ~(1<<PD0);
     148:	58 98       	cbi	0x0b, 0	; 11
     14a:	08 95       	ret
		else if(a == eS_PORTD1)
     14c:	8f 31       	cpi	r24, 0x1F	; 31
     14e:	91 05       	cpc	r25, r1
     150:	11 f4       	brne	.+4      	; 0x156 <pinChange+0xb0>
		  PORTD &= ~(1<<PD1);  
     152:	59 98       	cbi	0x0b, 1	; 11
     154:	08 95       	ret
		else if(a == eS_PORTD2)
     156:	80 32       	cpi	r24, 0x20	; 32
     158:	91 05       	cpc	r25, r1
     15a:	11 f4       	brne	.+4      	; 0x160 <pinChange+0xba>
		  PORTD &= ~(1<<PD2);
     15c:	5a 98       	cbi	0x0b, 2	; 11
     15e:	08 95       	ret
		else if(a == eS_PORTD3)
     160:	81 32       	cpi	r24, 0x21	; 33
     162:	91 05       	cpc	r25, r1
     164:	11 f4       	brne	.+4      	; 0x16a <pinChange+0xc4>
		  PORTD &= ~(1<<PD3);
     166:	5b 98       	cbi	0x0b, 3	; 11
     168:	08 95       	ret
		else if(a == eS_PORTD4)
     16a:	82 32       	cpi	r24, 0x22	; 34
     16c:	91 05       	cpc	r25, r1
     16e:	11 f4       	brne	.+4      	; 0x174 <pinChange+0xce>
		  PORTD &= ~(1<<PD4);
     170:	5c 98       	cbi	0x0b, 4	; 11
     172:	08 95       	ret
		else if(a == eS_PORTD5)
     174:	83 32       	cpi	r24, 0x23	; 35
     176:	91 05       	cpc	r25, r1
     178:	11 f4       	brne	.+4      	; 0x17e <pinChange+0xd8>
		  PORTD &= ~(1<<PD5);
     17a:	5d 98       	cbi	0x0b, 5	; 11
     17c:	08 95       	ret
		else if(a == eS_PORTD6)
     17e:	84 32       	cpi	r24, 0x24	; 36
     180:	91 05       	cpc	r25, r1
     182:	11 f4       	brne	.+4      	; 0x188 <pinChange+0xe2>
		  PORTD &= ~(1<<PD6);   
     184:	5e 98       	cbi	0x0b, 6	; 11
     186:	08 95       	ret
		else if(a == eS_PORTD7)
     188:	85 97       	sbiw	r24, 0x25	; 37
     18a:	09 f0       	breq	.+2      	; 0x18e <pinChange+0xe8>
     18c:	73 c0       	rjmp	.+230    	; 0x274 <pinChange+0x1ce>
		  PORTD &= ~(1<<PD7);           
     18e:	5f 98       	cbi	0x0b, 7	; 11
     190:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTB0)
     192:	8a 30       	cpi	r24, 0x0A	; 10
     194:	91 05       	cpc	r25, r1
     196:	11 f4       	brne	.+4      	; 0x19c <pinChange+0xf6>
	  	  PORTB |= (1<<PB0);
     198:	28 9a       	sbi	0x05, 0	; 5
     19a:	08 95       	ret
		else if(a == eS_PORTB1)
     19c:	8b 30       	cpi	r24, 0x0B	; 11
     19e:	91 05       	cpc	r25, r1
     1a0:	11 f4       	brne	.+4      	; 0x1a6 <pinChange+0x100>
		  PORTB |= (1<<PB1);
     1a2:	29 9a       	sbi	0x05, 1	; 5
     1a4:	08 95       	ret
		else if(a == eS_PORTB2)
     1a6:	8c 30       	cpi	r24, 0x0C	; 12
     1a8:	91 05       	cpc	r25, r1
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <pinChange+0x10a>
		  PORTB |= (1<<PB2);
     1ac:	2a 9a       	sbi	0x05, 2	; 5
     1ae:	08 95       	ret
		else if(a == eS_PORTB3)
     1b0:	8d 30       	cpi	r24, 0x0D	; 13
     1b2:	91 05       	cpc	r25, r1
     1b4:	11 f4       	brne	.+4      	; 0x1ba <pinChange+0x114>
		  PORTB |= (1<<PB3);
     1b6:	2b 9a       	sbi	0x05, 3	; 5
     1b8:	08 95       	ret
		else if(a == eS_PORTB4)
     1ba:	8e 30       	cpi	r24, 0x0E	; 14
     1bc:	91 05       	cpc	r25, r1
     1be:	11 f4       	brne	.+4      	; 0x1c4 <pinChange+0x11e>
		  PORTB |= (1<<PB4);
     1c0:	2c 9a       	sbi	0x05, 4	; 5
     1c2:	08 95       	ret
		else if(a == eS_PORTB5)
     1c4:	8f 30       	cpi	r24, 0x0F	; 15
     1c6:	91 05       	cpc	r25, r1
     1c8:	11 f4       	brne	.+4      	; 0x1ce <pinChange+0x128>
		  PORTB |= (1<<PB5);
     1ca:	2d 9a       	sbi	0x05, 5	; 5
     1cc:	08 95       	ret
		else if(a == eS_PORTB6)
     1ce:	80 31       	cpi	r24, 0x10	; 16
     1d0:	91 05       	cpc	r25, r1
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <pinChange+0x132>
		  PORTB |= (1<<PB6);
     1d4:	2e 9a       	sbi	0x05, 6	; 5
     1d6:	08 95       	ret
		else if(a == eS_PORTB7)
     1d8:	81 31       	cpi	r24, 0x11	; 17
     1da:	91 05       	cpc	r25, r1
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <pinChange+0x13c>
		  PORTB |= (1<<PB7);
     1de:	2f 9a       	sbi	0x05, 7	; 5
     1e0:	08 95       	ret
		else if(a == eS_PORTC0)
     1e2:	84 31       	cpi	r24, 0x14	; 20
     1e4:	91 05       	cpc	r25, r1
     1e6:	11 f4       	brne	.+4      	; 0x1ec <pinChange+0x146>
		  PORTC |= (1<<PC0);
     1e8:	40 9a       	sbi	0x08, 0	; 8
     1ea:	08 95       	ret
		else if(a == eS_PORTC1)
     1ec:	85 31       	cpi	r24, 0x15	; 21
     1ee:	91 05       	cpc	r25, r1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <pinChange+0x150>
		  PORTC |= (1<<PC1);
     1f2:	41 9a       	sbi	0x08, 1	; 8
     1f4:	08 95       	ret
		else if(a == eS_PORTC2)
     1f6:	86 31       	cpi	r24, 0x16	; 22
     1f8:	91 05       	cpc	r25, r1
     1fa:	11 f4       	brne	.+4      	; 0x200 <pinChange+0x15a>
	  	  PORTC |= (1<<PC2);
     1fc:	42 9a       	sbi	0x08, 2	; 8
     1fe:	08 95       	ret
		else if(a == eS_PORTC3)
     200:	87 31       	cpi	r24, 0x17	; 23
     202:	91 05       	cpc	r25, r1
     204:	11 f4       	brne	.+4      	; 0x20a <pinChange+0x164>
		  PORTC |= (1<<PC3);
     206:	43 9a       	sbi	0x08, 3	; 8
     208:	08 95       	ret
		else if(a == eS_PORTC4)
     20a:	88 31       	cpi	r24, 0x18	; 24
     20c:	91 05       	cpc	r25, r1
     20e:	11 f4       	brne	.+4      	; 0x214 <pinChange+0x16e>
		  PORTC |= (1<<PC4);
     210:	44 9a       	sbi	0x08, 4	; 8
     212:	08 95       	ret
		else if(a == eS_PORTC5)
     214:	89 31       	cpi	r24, 0x19	; 25
     216:	91 05       	cpc	r25, r1
     218:	11 f4       	brne	.+4      	; 0x21e <pinChange+0x178>
		  PORTC |= (1<<PC5);
     21a:	45 9a       	sbi	0x08, 5	; 8
     21c:	08 95       	ret
		else if(a == eS_PORTC6)
     21e:	8a 31       	cpi	r24, 0x1A	; 26
     220:	91 05       	cpc	r25, r1
     222:	11 f4       	brne	.+4      	; 0x228 <pinChange+0x182>
		  PORTC |= (1<<PC6);  
     224:	46 9a       	sbi	0x08, 6	; 8
     226:	08 95       	ret
		else if(a == eS_PORTD0)
     228:	8e 31       	cpi	r24, 0x1E	; 30
     22a:	91 05       	cpc	r25, r1
     22c:	11 f4       	brne	.+4      	; 0x232 <pinChange+0x18c>
		  PORTD |= (1<<PD0);
     22e:	58 9a       	sbi	0x0b, 0	; 11
     230:	08 95       	ret
		else if(a == eS_PORTD1)
     232:	8f 31       	cpi	r24, 0x1F	; 31
     234:	91 05       	cpc	r25, r1
     236:	11 f4       	brne	.+4      	; 0x23c <pinChange+0x196>
		  PORTD |= (1<<PD1);
     238:	59 9a       	sbi	0x0b, 1	; 11
     23a:	08 95       	ret
		else if(a == eS_PORTD2)
     23c:	80 32       	cpi	r24, 0x20	; 32
     23e:	91 05       	cpc	r25, r1
     240:	11 f4       	brne	.+4      	; 0x246 <pinChange+0x1a0>
		  PORTD |= (1<<PD2);
     242:	5a 9a       	sbi	0x0b, 2	; 11
     244:	08 95       	ret
		else if(a == eS_PORTD3)
     246:	81 32       	cpi	r24, 0x21	; 33
     248:	91 05       	cpc	r25, r1
     24a:	11 f4       	brne	.+4      	; 0x250 <pinChange+0x1aa>
		  PORTD |= (1<<PD3);
     24c:	5b 9a       	sbi	0x0b, 3	; 11
     24e:	08 95       	ret
		else if(a == eS_PORTD4)
     250:	82 32       	cpi	r24, 0x22	; 34
     252:	91 05       	cpc	r25, r1
     254:	11 f4       	brne	.+4      	; 0x25a <pinChange+0x1b4>
		  PORTD |= (1<<PD4);
     256:	5c 9a       	sbi	0x0b, 4	; 11
     258:	08 95       	ret
		else if(a == eS_PORTD5)
     25a:	83 32       	cpi	r24, 0x23	; 35
     25c:	91 05       	cpc	r25, r1
     25e:	11 f4       	brne	.+4      	; 0x264 <pinChange+0x1be>
		  PORTD |= (1<<PD5);
     260:	5d 9a       	sbi	0x0b, 5	; 11
     262:	08 95       	ret
		else if(a == eS_PORTD6)
     264:	84 32       	cpi	r24, 0x24	; 36
     266:	91 05       	cpc	r25, r1
     268:	11 f4       	brne	.+4      	; 0x26e <pinChange+0x1c8>
		  PORTD |= (1<<PD6);
     26a:	5e 9a       	sbi	0x0b, 6	; 11
     26c:	08 95       	ret
		else if(a == eS_PORTD7)
     26e:	85 97       	sbiw	r24, 0x25	; 37
     270:	09 f4       	brne	.+2      	; 0x274 <pinChange+0x1ce>
		  PORTD |= (1<<PD7);
     272:	5f 9a       	sbi	0x0b, 7	; 11
     274:	08 95       	ret

00000276 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
     276:	cf 93       	push	r28
     278:	c8 2f       	mov	r28, r24
	if(a & 1)
     27a:	80 ff       	sbrs	r24, 0
     27c:	07 c0       	rjmp	.+14     	; 0x28c <Lcd4_Port+0x16>
	pinChange(D4,1);
     27e:	61 e0       	ldi	r22, 0x01	; 1
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	80 e2       	ldi	r24, 0x20	; 32
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
     28a:	06 c0       	rjmp	.+12     	; 0x298 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	80 e2       	ldi	r24, 0x20	; 32
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	
	if(a & 2)
     298:	c1 ff       	sbrs	r28, 1
     29a:	07 c0       	rjmp	.+14     	; 0x2aa <Lcd4_Port+0x34>
	pinChange(D5,1);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	81 e2       	ldi	r24, 0x21	; 33
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
     2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	81 e2       	ldi	r24, 0x21	; 33
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	
	if(a & 4)
     2b6:	c2 ff       	sbrs	r28, 2
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <Lcd4_Port+0x52>
	pinChange(D6,1);
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	82 e2       	ldi	r24, 0x22	; 34
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
     2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	82 e2       	ldi	r24, 0x22	; 34
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	
	if(a & 8)
     2d4:	c3 ff       	sbrs	r28, 3
     2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <Lcd4_Port+0x70>
	pinChange(D7,1);
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	8a e0       	ldi	r24, 0x0A	; 10
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
     2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	8a e0       	ldi	r24, 0x0A	; 10
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
}
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     2f6:	cf 93       	push	r28
     2f8:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	8e e1       	ldi	r24, 0x1E	; 30
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	Lcd4_Port(a);
     306:	8c 2f       	mov	r24, r28
     308:	0e 94 3b 01 	call	0x276	; 0x276 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	8f e1       	ldi	r24, 0x1F	; 31
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     318:	8f e9       	ldi	r24, 0x9F	; 159
     31a:	9f e0       	ldi	r25, 0x0F	; 15
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <Lcd4_Cmd+0x26>
     320:	00 c0       	rjmp	.+0      	; 0x322 <Lcd4_Cmd+0x2c>
     322:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	8f e1       	ldi	r24, 0x1F	; 31
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
     330:	8f e9       	ldi	r24, 0x9F	; 159
     332:	9f e0       	ldi	r25, 0x0F	; 15
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <Lcd4_Cmd+0x3e>
     338:	00 c0       	rjmp	.+0      	; 0x33a <Lcd4_Cmd+0x44>
     33a:	00 00       	nop
	_delay_ms(1);
}
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
     34c:	08 95       	ret

0000034e <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
     34e:	cf 93       	push	r28
     350:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	59 f4       	brne	.+22     	; 0x36c <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
     356:	80 e8       	ldi	r24, 0x80	; 128
     358:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     35a:	82 95       	swap	r24
     35c:	8f 70       	andi	r24, 0x0F	; 15
     35e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     362:	8c 2f       	mov	r24, r28
     364:	8f 70       	andi	r24, 0x0F	; 15
     366:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
     36a:	0c c0       	rjmp	.+24     	; 0x384 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	51 f4       	brne	.+20     	; 0x384 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
     370:	80 ec       	ldi	r24, 0xC0	; 192
     372:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     374:	82 95       	swap	r24
     376:	8f 70       	andi	r24, 0x0F	; 15
     378:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     37c:	8c 2f       	mov	r24, r28
     37e:	8f 70       	andi	r24, 0x0F	; 15
     380:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	}
}
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 3b 01 	call	0x276	; 0x276 <Lcd4_Port>
     38e:	2f ef       	ldi	r18, 0xFF	; 255
     390:	89 ef       	ldi	r24, 0xF9	; 249
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	21 50       	subi	r18, 0x01	; 1
     396:	80 40       	sbci	r24, 0x00	; 0
     398:	90 40       	sbci	r25, 0x00	; 0
     39a:	e1 f7       	brne	.-8      	; 0x394 <Lcd4_Init+0xc>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <Lcd4_Init+0x16>
     39e:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
     3a6:	8f e1       	ldi	r24, 0x1F	; 31
     3a8:	9e e4       	ldi	r25, 0x4E	; 78
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <Lcd4_Init+0x22>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <Lcd4_Init+0x28>
     3b0:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
     3b8:	8f ed       	ldi	r24, 0xDF	; 223
     3ba:	9b ea       	ldi	r25, 0xAB	; 171
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <Lcd4_Init+0x34>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <Lcd4_Init+0x3a>
     3c2:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     3c4:	83 e0       	ldi	r24, 0x03	; 3
     3c6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     3d6:	88 e0       	ldi	r24, 0x08	; 8
     3d8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     3e2:	8c e0       	ldi	r24, 0x0C	; 12
     3e4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     3ee:	86 e0       	ldi	r24, 0x06	; 6
     3f0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
     3f4:	08 95       	ret

000003f6 <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
     3f6:	cf 93       	push	r28
     3f8:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	8e e1       	ldi	r24, 0x1E	; 30
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     406:	8c 2f       	mov	r24, r28
     408:	82 95       	swap	r24
     40a:	8f 70       	andi	r24, 0x0F	; 15
     40c:	0e 94 3b 01 	call	0x276	; 0x276 <Lcd4_Port>
	pinChange(EN,1);
     410:	61 e0       	ldi	r22, 0x01	; 1
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	8f e1       	ldi	r24, 0x1F	; 31
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
     41c:	8f e9       	ldi	r24, 0x9F	; 159
     41e:	9f e0       	ldi	r25, 0x0F	; 15
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <Lcd4_Write_Char+0x2a>
     424:	00 c0       	rjmp	.+0      	; 0x426 <Lcd4_Write_Char+0x30>
     426:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	8f e1       	ldi	r24, 0x1F	; 31
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
     434:	8f e9       	ldi	r24, 0x9F	; 159
     436:	9f e0       	ldi	r25, 0x0F	; 15
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <Lcd4_Write_Char+0x42>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <Lcd4_Write_Char+0x48>
     43e:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     440:	8c 2f       	mov	r24, r28
     442:	8f 70       	andi	r24, 0x0F	; 15
     444:	0e 94 3b 01 	call	0x276	; 0x276 <Lcd4_Port>
	pinChange(EN,1);
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	8f e1       	ldi	r24, 0x1F	; 31
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
     454:	8f e9       	ldi	r24, 0x9F	; 159
     456:	9f e0       	ldi	r25, 0x0F	; 15
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <Lcd4_Write_Char+0x62>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <Lcd4_Write_Char+0x68>
     45e:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	8f e1       	ldi	r24, 0x1F	; 31
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
     46c:	8f e9       	ldi	r24, 0x9F	; 159
     46e:	9f e0       	ldi	r25, 0x0F	; 15
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <Lcd4_Write_Char+0x7a>
     474:	00 c0       	rjmp	.+0      	; 0x476 <Lcd4_Write_Char+0x80>
     476:	00 00       	nop
	_delay_ms(1);
}
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     482:	88 81       	ld	r24, Y
     484:	88 23       	and	r24, r24
     486:	31 f0       	breq	.+12     	; 0x494 <Lcd4_Write_String+0x18>
     488:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     48a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     48e:	89 91       	ld	r24, Y+
     490:	81 11       	cpse	r24, r1
     492:	fb cf       	rjmp	.-10     	; 0x48a <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <pot_write>:
#include "SPI.h"

void pot_write(unsigned char data){
     49a:	cf 93       	push	r28
     49c:	c8 2f       	mov	r28, r24
	spi_data(0);
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	0e 94 42 08 	call	0x1084	; 0x1084 <spi_data>
	spi_data(data);	
     4a4:	8c 2f       	mov	r24, r28
     4a6:	0e 94 42 08 	call	0x1084	; 0x1084 <spi_data>
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <adc_read>:
}

uint16_t adc_read(uint8_t channel){
	channel &= 0b00000111; //for safety mask out only last 3 bits
	
	ADMUX &= ~(0b00000111); //write channel to admux
     4ae:	ec e7       	ldi	r30, 0x7C	; 124
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	90 81       	ld	r25, Z
     4b4:	98 7f       	andi	r25, 0xF8	; 248
     4b6:	90 83       	st	Z, r25
	ADMUX |= channel;
     4b8:	90 81       	ld	r25, Z
	// Turn ADC on and set prescaler = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
}

uint16_t adc_read(uint8_t channel){
	channel &= 0b00000111; //for safety mask out only last 3 bits
     4ba:	87 70       	andi	r24, 0x07	; 7
	
	ADMUX &= ~(0b00000111); //write channel to admux
	ADMUX |= channel;
     4bc:	98 2b       	or	r25, r24
     4be:	90 83       	st	Z, r25
	
	ADCSRA |= 1<<ADSC; //start adc
     4c0:	ea e7       	ldi	r30, 0x7A	; 122
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	80 64       	ori	r24, 0x40	; 64
     4c8:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC)){
     4ca:	80 81       	ld	r24, Z
     4cc:	86 fd       	sbrc	r24, 6
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <adc_read+0x1c>
	}
	
	return ADC;
     4d0:	80 91 78 00 	lds	r24, 0x0078
     4d4:	90 91 79 00 	lds	r25, 0x0079
     4d8:	08 95       	ret

000004da <timer_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_init(){
	// Set prescaler to 256 so F = 62500hz so overflow time approx 1 sec
	TCCR1B |= (1<<CS12);
     4da:	e1 e8       	ldi	r30, 0x81	; 129
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	84 60       	ori	r24, 0x04	; 4
     4e2:	80 83       	st	Z, r24
	
	// Start counter
	TCNT1 = 0;
     4e4:	10 92 85 00 	sts	0x0085, r1
     4e8:	10 92 84 00 	sts	0x0084, r1
	
	// Enable interrupt overflow
	TIMSK1 = (1<<TOIE1);
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	80 93 6f 00 	sts	0x006F, r24
	
	sei();
     4f2:	78 94       	sei
	
	timer_flag = 0;
     4f4:	10 92 6f 01 	sts	0x016F, r1
     4f8:	10 92 6e 01 	sts	0x016E, r1
     4fc:	08 95       	ret

000004fe <__vector_13>:
}

ISR(TIMER1_OVF_vect){
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	11 24       	eor	r1, r1
     508:	8f 93       	push	r24
     50a:	9f 93       	push	r25
	if (timer_flag) {
     50c:	80 91 6e 01 	lds	r24, 0x016E
     510:	90 91 6f 01 	lds	r25, 0x016F
     514:	89 2b       	or	r24, r25
     516:	29 f0       	breq	.+10     	; 0x522 <__vector_13+0x24>
		timer_flag = 0;
     518:	10 92 6f 01 	sts	0x016F, r1
     51c:	10 92 6e 01 	sts	0x016E, r1
     520:	06 c0       	rjmp	.+12     	; 0x52e <__vector_13+0x30>
	}
	else timer_flag = 1;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	90 93 6f 01 	sts	0x016F, r25
     52a:	80 93 6e 01 	sts	0x016E, r24
     52e:	9f 91       	pop	r25
     530:	8f 91       	pop	r24
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <main>:
#include "timer1.h"



int main(void)
{	/////////////////// SETUP //////////////////////
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	cf 5f       	subi	r28, 0xFF	; 255
     546:	d1 09       	sbc	r29, r1
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
	//Setting up output for LCD Pins
	DDRD |= (1<<DDD0)|(1<<DDD1)|(1<<DDD2)|(1<<DDD3)|(1<<DDD4);
     552:	8a b1       	in	r24, 0x0a	; 10
     554:	8f 61       	ori	r24, 0x1F	; 31
     556:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB0);
     558:	20 9a       	sbi	0x04, 0	; 4
	
	// LCD Initialisation
	Lcd4_Init();
     55a:	0e 94 c4 01 	call	0x388	; 0x388 <Lcd4_Init>
	
	// SPI Initialisation
	spi_init();
     55e:	0e 94 3b 08 	call	0x1076	; 0x1076 <spi_init>
	
	// Shift register Initialisation
	// Pins defined in header file. 
	HC595Init();
     562:	0e 94 18 08 	call	0x1030	; 0x1030 <HC595Init>
void adc_init(){
	// use ARef
	// aka do nothing
	
	// Turn ADC on and set prescaler = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
     566:	87 e8       	ldi	r24, 0x87	; 135
     568:	80 93 7a 00 	sts	0x007A, r24
	
	// ADC Initialisation
	adc_init();
	
	// Timer Initialisation
	timer_init();
     56c:	0e 94 6d 02 	call	0x4da	; 0x4da <timer_init>
	
	// Define Inputs
	// ADC input
	DDRC &= ~(1<<DDC0);
     570:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1<<DDC1);
     572:	39 98       	cbi	0x07, 1	; 7
	// Push Button
	DDRB &= ~(1<<DDB1);
     574:	21 98       	cbi	0x04, 1	; 4
	char volts[8];
	int maximumCurrent,maximumVoltage,maximumRipple;
	uint16_t dataRipple[numberPoints];
	uint16_t dataVoltage[numberPoints];
	uint16_t m;
	uint8_t led_pattern[9]={
     576:	89 e0       	ldi	r24, 0x09	; 9
     578:	e0 e0       	ldi	r30, 0x00	; 0
     57a:	f1 e0       	ldi	r31, 0x01	; 1
     57c:	de 01       	movw	r26, r28
     57e:	aa 51       	subi	r26, 0x1A	; 26
     580:	bf 4f       	sbci	r27, 0xFF	; 255
     582:	01 90       	ld	r0, Z+
     584:	0d 92       	st	X+, r0
     586:	8a 95       	dec	r24
     588:	e1 f7       	brne	.-8      	; 0x582 <main+0x46>
	};
	
	////////////////////////////////////////////////
	
	// Startup Code
	pot_write(0);
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 4d 02 	call	0x49a	; 0x49a <pot_write>
	HC595Write(led_pattern[8]);
     590:	c2 51       	subi	r28, 0x12	; 18
     592:	df 4f       	sbci	r29, 0xFF	; 255
     594:	88 81       	ld	r24, Y
     596:	ce 5e       	subi	r28, 0xEE	; 238
     598:	d0 40       	sbci	r29, 0x00	; 0
     59a:	0e 94 28 08 	call	0x1050	; 0x1050 <HC595Write>
	Lcd4_Clear();
     59e:	0e 94 a0 01 	call	0x340	; 0x340 <Lcd4_Clear>
			// Set current
			pot_write(i);			
			k = floor((i+1)*3.9); //convert to centiamps
			
			// Formating String for LCD
			amps[0]=floor(k/100)+INT_TO_ASCII;
     5a2:	3e 01       	movw	r6, r28
     5a4:	29 ed       	ldi	r18, 0xD9	; 217
     5a6:	62 0e       	add	r6, r18
     5a8:	71 1c       	adc	r7, r1
			// Implement raw data collection
			dataVoltage[i]= adc_read(VOLTAGE_CHANNEL);
			
			// Formating string for LCD
			m= floor((dataVoltage[i]+1)*VOLTAGE_SCALE*VOLTAGE_DIVIDER);
			volts[0]=floor(m/100)+INT_TO_ASCII;
     5aa:	1e 01       	movw	r2, r28
     5ac:	3e ed       	ldi	r19, 0xDE	; 222
     5ae:	23 0e       	add	r2, r19
     5b0:	31 1c       	adc	r3, r1
				dataRipple[i]=0;
			}
			
			//testing REMOVE IN FINAL
			m= floor((dataRipple[i]+1)*RIPPLE_SCALE);
			testing[0]=floor(m/100)+INT_TO_ASCII;
     5b2:	7e 01       	movw	r14, r28
     5b4:	41 ed       	ldi	r20, 0xD1	; 209
     5b6:	e4 0e       	add	r14, r20
     5b8:	f1 1c       	adc	r15, r1
     5ba:	c4 50       	subi	r28, 0x04	; 4
     5bc:	df 4f       	sbci	r29, 0xFF	; 255
     5be:	e8 82       	st	Y, r14
     5c0:	cc 5f       	subi	r28, 0xFC	; 252
     5c2:	d0 40       	sbci	r29, 0x00	; 0
     5c4:	c3 50       	subi	r28, 0x03	; 3
     5c6:	df 4f       	sbci	r29, 0xFF	; 255
     5c8:	f8 82       	st	Y, r15
     5ca:	cd 5f       	subi	r28, 0xFD	; 253
     5cc:	d0 40       	sbci	r29, 0x00	; 0
     5ce:	89 e6       	ldi	r24, 0x69	; 105
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	8c 0f       	add	r24, r28
     5d4:	9d 1f       	adc	r25, r29
     5d6:	0a 97       	sbiw	r24, 0x0a	; 10
     5d8:	c2 50       	subi	r28, 0x02	; 2
     5da:	df 4f       	sbci	r29, 0xFF	; 255
     5dc:	99 83       	std	Y+1, r25	; 0x01
     5de:	88 83       	st	Y, r24
     5e0:	ce 5f       	subi	r28, 0xFE	; 254
     5e2:	d0 40       	sbci	r29, 0x00	; 0
			// Set current
			pot_write(i);			
			k = floor((i+1)*3.9); //convert to centiamps
			
			// Formating String for LCD
			amps[0]=floor(k/100)+INT_TO_ASCII;
     5e4:	cd 50       	subi	r28, 0x0D	; 13
     5e6:	df 4f       	sbci	r29, 0xFF	; 255
     5e8:	68 82       	st	Y, r6
     5ea:	c3 5f       	subi	r28, 0xF3	; 243
     5ec:	d0 40       	sbci	r29, 0x00	; 0
     5ee:	cc 50       	subi	r28, 0x0C	; 12
     5f0:	df 4f       	sbci	r29, 0xFF	; 255
     5f2:	78 82       	st	Y, r7
     5f4:	c4 5f       	subi	r28, 0xF4	; 244
     5f6:	d0 40       	sbci	r29, 0x00	; 0
			// Implement raw data collection
			dataVoltage[i]= adc_read(VOLTAGE_CHANNEL);
			
			// Formating string for LCD
			m= floor((dataVoltage[i]+1)*VOLTAGE_SCALE*VOLTAGE_DIVIDER);
			volts[0]=floor(m/100)+INT_TO_ASCII;
     5f8:	c9 50       	subi	r28, 0x09	; 9
     5fa:	df 4f       	sbci	r29, 0xFF	; 255
     5fc:	28 82       	st	Y, r2
     5fe:	c7 5f       	subi	r28, 0xF7	; 247
     600:	d0 40       	sbci	r29, 0x00	; 0
     602:	c8 50       	subi	r28, 0x08	; 8
     604:	df 4f       	sbci	r29, 0xFF	; 255
     606:	38 82       	st	Y, r3
     608:	c8 5f       	subi	r28, 0xF8	; 248
     60a:	d0 40       	sbci	r29, 0x00	; 0
				dataRipple[i]=0;
			}
			
			//testing REMOVE IN FINAL
			m= floor((dataRipple[i]+1)*RIPPLE_SCALE);
			testing[0]=floor(m/100)+INT_TO_ASCII;
     60c:	c4 50       	subi	r28, 0x04	; 4
     60e:	df 4f       	sbci	r29, 0xFF	; 255
     610:	98 81       	ld	r25, Y
     612:	cc 5f       	subi	r28, 0xFC	; 252
     614:	d0 40       	sbci	r29, 0x00	; 0
     616:	cb 50       	subi	r28, 0x0B	; 11
     618:	df 4f       	sbci	r29, 0xFF	; 255
     61a:	98 83       	st	Y, r25
     61c:	c5 5f       	subi	r28, 0xF5	; 245
     61e:	d0 40       	sbci	r29, 0x00	; 0
     620:	c3 50       	subi	r28, 0x03	; 3
     622:	df 4f       	sbci	r29, 0xFF	; 255
     624:	e8 81       	ld	r30, Y
     626:	cd 5f       	subi	r28, 0xFD	; 253
     628:	d0 40       	sbci	r29, 0x00	; 0
     62a:	ca 50       	subi	r28, 0x0A	; 10
     62c:	df 4f       	sbci	r29, 0xFF	; 255
     62e:	e8 83       	st	Y, r30
     630:	c6 5f       	subi	r28, 0xF6	; 246
     632:	d0 40       	sbci	r29, 0x00	; 0
	
	// LOOP
	while(1)
	{	/////////////// Startup ////////////
		// Initial text on LCD 
		Lcd4_Clear();
     634:	0e 94 a0 01 	call	0x340	; 0x340 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,2);
     638:	62 e0       	ldi	r22, 0x02	; 2
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("USB Quality");
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,5);
     648:	65 e0       	ldi	r22, 0x05	; 5
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("Tester");
     650:	85 e1       	ldi	r24, 0x15	; 21
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
     658:	ff ef       	ldi	r31, 0xFF	; 255
     65a:	23 ed       	ldi	r18, 0xD3	; 211
     65c:	30 e3       	ldi	r19, 0x30	; 48
     65e:	f1 50       	subi	r31, 0x01	; 1
     660:	20 40       	sbci	r18, 0x00	; 0
     662:	30 40       	sbci	r19, 0x00	; 0
     664:	e1 f7       	brne	.-8      	; 0x65e <main+0x122>
     666:	00 c0       	rjmp	.+0      	; 0x668 <main+0x12c>
     668:	00 00       	nop
		_delay_ms(1000);
		Lcd4_Clear();
     66a:	0e 94 a0 01 	call	0x340	; 0x340 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,1);
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("Press to begin");
     676:	8c e1       	ldi	r24, 0x1C	; 28
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,6);
     67e:	66 e0       	ldi	r22, 0x06	; 6
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("test");
     686:	8b e2       	ldi	r24, 0x2B	; 43
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,15);
     68e:	6f e0       	ldi	r22, 0x0F	; 15
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_Char(0b01111110); //Arrow
     696:	8e e7       	ldi	r24, 0x7E	; 126
     698:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
		
		
		
		while((PINB & (1<<PB1))==0){ //Wait for button to be pressed
     69c:	19 9b       	sbis	0x03, 1	; 3
     69e:	fe cf       	rjmp	.-4      	; 0x69c <main+0x160>
		}
		
		// Formating LCD Text
		Lcd4_Clear();
     6a0:	0e 94 a0 01 	call	0x340	; 0x340 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("Current: ");
     6ac:	83 e3       	ldi	r24, 0x33	; 51
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		Lcd4_Set_Cursor(1,14);
     6b4:	6e e0       	ldi	r22, 0x0E	; 14
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_Char('A');
     6bc:	81 e4       	ldi	r24, 0x41	; 65
     6be:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
		
		Lcd4_Set_Cursor(2,0);
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		//Lcd4_Write_String("Voltage: "); REMOVE LATER
		Lcd4_Set_Cursor(2,14);
     6ca:	6e e0       	ldi	r22, 0x0E	; 14
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_Char('V');
     6d2:	86 e5       	ldi	r24, 0x56	; 86
     6d4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
     6d8:	ce 01       	movw	r24, r28
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	c1 51       	subi	r28, 0x11	; 17
     6de:	df 4f       	sbci	r29, 0xFF	; 255
     6e0:	99 83       	std	Y+1, r25	; 0x01
     6e2:	88 83       	st	Y, r24
     6e4:	cf 5e       	subi	r28, 0xEF	; 239
     6e6:	d0 40       	sbci	r29, 0x00	; 0
     6e8:	fe 01       	movw	r30, r28
     6ea:	e7 59       	subi	r30, 0x97	; 151
     6ec:	ff 4f       	sbci	r31, 0xFF	; 255
     6ee:	cf 50       	subi	r28, 0x0F	; 15
     6f0:	df 4f       	sbci	r29, 0xFF	; 255
     6f2:	f9 83       	std	Y+1, r31	; 0x01
     6f4:	e8 83       	st	Y, r30
     6f6:	c1 5f       	subi	r28, 0xF1	; 241
     6f8:	d0 40       	sbci	r29, 0x00	; 0
		
		///////////////////////////////////////
	
		/////////////// Test //////////////////
				
		for(int i=0;i<numberPoints;i++){
     6fa:	00 e0       	ldi	r16, 0x00	; 0
     6fc:	10 e0       	ldi	r17, 0x00	; 0
			k = floor((i+1)*3.9); //convert to centiamps
			
			// Formating String for LCD
			amps[0]=floor(k/100)+INT_TO_ASCII;
			amps[1]='.';
			amps[2]=floor((k%100)/10)+INT_TO_ASCII;
     6fe:	0f 2e       	mov	r0, r31
     700:	fa e0       	ldi	r31, 0x0A	; 10
     702:	4f 2e       	mov	r4, r31
     704:	51 2c       	mov	r5, r1
     706:	f0 2d       	mov	r31, r0
	
		/////////////// Test //////////////////
				
		for(int i=0;i<numberPoints;i++){
			// Set current
			pot_write(i);			
     708:	80 2f       	mov	r24, r16
     70a:	0e 94 4d 02 	call	0x49a	; 0x49a <pot_write>
			k = floor((i+1)*3.9); //convert to centiamps
     70e:	0f 5f       	subi	r16, 0xFF	; 255
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	b8 01       	movw	r22, r16
     714:	88 27       	eor	r24, r24
     716:	77 fd       	sbrc	r23, 7
     718:	80 95       	com	r24
     71a:	98 2f       	mov	r25, r24
     71c:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     720:	2a e9       	ldi	r18, 0x9A	; 154
     722:	39 e9       	ldi	r19, 0x99	; 153
     724:	49 e7       	ldi	r20, 0x79	; 121
     726:	50 e4       	ldi	r21, 0x40	; 64
     728:	0e 94 28 0a 	call	0x1450	; 0x1450 <__mulsf3>
     72c:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     730:	0e 94 16 09 	call	0x122c	; 0x122c <__fixsfsi>
     734:	6b 01       	movw	r12, r22
			
			// Formating String for LCD
			amps[0]=floor(k/100)+INT_TO_ASCII;
     736:	cb 01       	movw	r24, r22
     738:	64 e6       	ldi	r22, 0x64	; 100
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     740:	5c 01       	movw	r10, r24
     742:	88 27       	eor	r24, r24
     744:	77 fd       	sbrc	r23, 7
     746:	80 95       	com	r24
     748:	98 2f       	mov	r25, r24
     74a:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     74e:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	40 e4       	ldi	r20, 0x40	; 64
     758:	52 e4       	ldi	r21, 0x42	; 66
     75a:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     75e:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     762:	f3 01       	movw	r30, r6
     764:	60 83       	st	Z, r22
			amps[1]='.';
     766:	2e e2       	ldi	r18, 0x2E	; 46
     768:	21 83       	std	Z+1, r18	; 0x01
			amps[2]=floor((k%100)/10)+INT_TO_ASCII;
     76a:	c5 01       	movw	r24, r10
     76c:	b2 01       	movw	r22, r4
     76e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     772:	88 27       	eor	r24, r24
     774:	77 fd       	sbrc	r23, 7
     776:	80 95       	com	r24
     778:	98 2f       	mov	r25, r24
     77a:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     77e:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	40 e4       	ldi	r20, 0x40	; 64
     788:	52 e4       	ldi	r21, 0x42	; 66
     78a:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     78e:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     792:	f3 01       	movw	r30, r6
     794:	62 83       	std	Z+2, r22	; 0x02
			amps[3]=k%10+INT_TO_ASCII;
     796:	c6 01       	movw	r24, r12
     798:	b2 01       	movw	r22, r4
     79a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     79e:	80 5d       	subi	r24, 0xD0	; 208
     7a0:	83 83       	std	Z+3, r24	; 0x03
			amps[4]='\0';
     7a2:	14 82       	std	Z+4, r1	; 0x04
			
			// Writing string
			Lcd4_Set_Cursor(1,9);
     7a4:	69 e0       	ldi	r22, 0x09	; 9
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
			Lcd4_Write_String(amps);
     7ac:	cd 50       	subi	r28, 0x0D	; 13
     7ae:	df 4f       	sbci	r29, 0xFF	; 255
     7b0:	88 81       	ld	r24, Y
     7b2:	c3 5f       	subi	r28, 0xF3	; 243
     7b4:	d0 40       	sbci	r29, 0x00	; 0
     7b6:	cc 50       	subi	r28, 0x0C	; 12
     7b8:	df 4f       	sbci	r29, 0xFF	; 255
     7ba:	98 81       	ld	r25, Y
     7bc:	c4 5f       	subi	r28, 0xF4	; 244
     7be:	d0 40       	sbci	r29, 0x00	; 0
     7c0:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
			
			// Voltage level
			// Implement raw data collection
			dataVoltage[i]= adc_read(VOLTAGE_CHANNEL);
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 57 02 	call	0x4ae	; 0x4ae <adc_read>
     7ca:	cf 50       	subi	r28, 0x0F	; 15
     7cc:	df 4f       	sbci	r29, 0xFF	; 255
     7ce:	e8 81       	ld	r30, Y
     7d0:	f9 81       	ldd	r31, Y+1	; 0x01
     7d2:	c1 5f       	subi	r28, 0xF1	; 241
     7d4:	d0 40       	sbci	r29, 0x00	; 0
     7d6:	81 93       	st	Z+, r24
     7d8:	91 93       	st	Z+, r25
     7da:	cf 50       	subi	r28, 0x0F	; 15
     7dc:	df 4f       	sbci	r29, 0xFF	; 255
     7de:	f9 83       	std	Y+1, r31	; 0x01
     7e0:	e8 83       	st	Y, r30
     7e2:	c1 5f       	subi	r28, 0xF1	; 241
     7e4:	d0 40       	sbci	r29, 0x00	; 0
			
			// Formating string for LCD
			m= floor((dataVoltage[i]+1)*VOLTAGE_SCALE*VOLTAGE_DIVIDER);
     7e6:	bc 01       	movw	r22, r24
     7e8:	6f 5f       	subi	r22, 0xFF	; 255
     7ea:	7f 4f       	sbci	r23, 0xFF	; 255
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 47 09 	call	0x128e	; 0x128e <__floatunsisf>
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	4a ef       	ldi	r20, 0xFA	; 250
     7fa:	5e e3       	ldi	r21, 0x3E	; 62
     7fc:	0e 94 28 0a 	call	0x1450	; 0x1450 <__mulsf3>
     800:	9b 01       	movw	r18, r22
     802:	ac 01       	movw	r20, r24
     804:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     808:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     80c:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     810:	4b 01       	movw	r8, r22
     812:	5c 01       	movw	r10, r24
			volts[0]=floor(m/100)+INT_TO_ASCII;
     814:	9b 01       	movw	r18, r22
     816:	36 95       	lsr	r19
     818:	27 95       	ror	r18
     81a:	36 95       	lsr	r19
     81c:	27 95       	ror	r18
     81e:	ab e7       	ldi	r26, 0x7B	; 123
     820:	b4 e1       	ldi	r27, 0x14	; 20
     822:	0e 94 9f 0a 	call	0x153e	; 0x153e <__umulhisi3>
     826:	6c 01       	movw	r12, r24
     828:	d6 94       	lsr	r13
     82a:	c7 94       	ror	r12
     82c:	b6 01       	movw	r22, r12
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 47 09 	call	0x128e	; 0x128e <__floatunsisf>
     836:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e4       	ldi	r20, 0x40	; 64
     840:	52 e4       	ldi	r21, 0x42	; 66
     842:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     846:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     84a:	f1 01       	movw	r30, r2
     84c:	60 83       	st	Z, r22
			volts[1]='.';
     84e:	2e e2       	ldi	r18, 0x2E	; 46
     850:	21 83       	std	Z+1, r18	; 0x01
			volts[2]=floor((m%100)/10)+INT_TO_ASCII;
     852:	34 e6       	ldi	r19, 0x64	; 100
     854:	3c 9d       	mul	r19, r12
     856:	c0 01       	movw	r24, r0
     858:	3d 9d       	mul	r19, r13
     85a:	90 0d       	add	r25, r0
     85c:	11 24       	eor	r1, r1
     85e:	94 01       	movw	r18, r8
     860:	28 1b       	sub	r18, r24
     862:	39 0b       	sbc	r19, r25
     864:	ad ec       	ldi	r26, 0xCD	; 205
     866:	bc ec       	ldi	r27, 0xCC	; 204
     868:	0e 94 9f 0a 	call	0x153e	; 0x153e <__umulhisi3>
     86c:	96 95       	lsr	r25
     86e:	87 95       	ror	r24
     870:	96 95       	lsr	r25
     872:	87 95       	ror	r24
     874:	96 95       	lsr	r25
     876:	87 95       	ror	r24
     878:	bc 01       	movw	r22, r24
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 47 09 	call	0x128e	; 0x128e <__floatunsisf>
     882:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e4       	ldi	r20, 0x40	; 64
     88c:	52 e4       	ldi	r21, 0x42	; 66
     88e:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     892:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     896:	f1 01       	movw	r30, r2
     898:	62 83       	std	Z+2, r22	; 0x02
			volts[3]=m%10+INT_TO_ASCII;
     89a:	94 01       	movw	r18, r8
     89c:	ad ec       	ldi	r26, 0xCD	; 205
     89e:	bc ec       	ldi	r27, 0xCC	; 204
     8a0:	0e 94 9f 0a 	call	0x153e	; 0x153e <__umulhisi3>
     8a4:	96 95       	lsr	r25
     8a6:	87 95       	ror	r24
     8a8:	96 95       	lsr	r25
     8aa:	87 95       	ror	r24
     8ac:	96 95       	lsr	r25
     8ae:	87 95       	ror	r24
     8b0:	9c 01       	movw	r18, r24
     8b2:	22 0f       	add	r18, r18
     8b4:	33 1f       	adc	r19, r19
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	82 0f       	add	r24, r18
     8c4:	93 1f       	adc	r25, r19
     8c6:	94 01       	movw	r18, r8
     8c8:	28 1b       	sub	r18, r24
     8ca:	39 0b       	sbc	r19, r25
     8cc:	c9 01       	movw	r24, r18
     8ce:	80 5d       	subi	r24, 0xD0	; 208
     8d0:	83 83       	std	Z+3, r24	; 0x03
			volts[4]='\0';
     8d2:	14 82       	std	Z+4, r1	; 0x04
			
			// Display Voltage on LCD
			Lcd4_Set_Cursor(2,9);
     8d4:	69 e0       	ldi	r22, 0x09	; 9
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
			Lcd4_Write_String(volts);
     8dc:	c9 50       	subi	r28, 0x09	; 9
     8de:	df 4f       	sbci	r29, 0xFF	; 255
     8e0:	88 81       	ld	r24, Y
     8e2:	c7 5f       	subi	r28, 0xF7	; 247
     8e4:	d0 40       	sbci	r29, 0x00	; 0
     8e6:	c8 50       	subi	r28, 0x08	; 8
     8e8:	df 4f       	sbci	r29, 0xFF	; 255
     8ea:	98 81       	ld	r25, Y
     8ec:	c8 5f       	subi	r28, 0xF8	; 248
     8ee:	d0 40       	sbci	r29, 0x00	; 0
     8f0:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
			
			// Ripple magnitude
			// Implement raw data collection
			
			b= adc_read(RIPPLE_CHANNEL);
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	0e 94 57 02 	call	0x4ae	; 0x4ae <adc_read>
			if (b>RIPPLE_OFFSET){
     8fa:	8e 32       	cpi	r24, 0x2E	; 46
     8fc:	91 05       	cpc	r25, r1
     8fe:	54 f0       	brlt	.+20     	; 0x914 <__stack+0x15>
				dataRipple[i]=b-RIPPLE_OFFSET;
     900:	8d 97       	sbiw	r24, 0x2d	; 45
     902:	c1 51       	subi	r28, 0x11	; 17
     904:	df 4f       	sbci	r29, 0xFF	; 255
     906:	e8 81       	ld	r30, Y
     908:	f9 81       	ldd	r31, Y+1	; 0x01
     90a:	cf 5e       	subi	r28, 0xEF	; 239
     90c:	d0 40       	sbci	r29, 0x00	; 0
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	80 83       	st	Z, r24
     912:	08 c0       	rjmp	.+16     	; 0x924 <__stack+0x25>
			} else {
				dataRipple[i]=0;
     914:	c1 51       	subi	r28, 0x11	; 17
     916:	df 4f       	sbci	r29, 0xFF	; 255
     918:	e8 81       	ld	r30, Y
     91a:	f9 81       	ldd	r31, Y+1	; 0x01
     91c:	cf 5e       	subi	r28, 0xEF	; 239
     91e:	d0 40       	sbci	r29, 0x00	; 0
     920:	11 82       	std	Z+1, r1	; 0x01
     922:	10 82       	st	Z, r1
			}
			
			//testing REMOVE IN FINAL
			m= floor((dataRipple[i]+1)*RIPPLE_SCALE);
     924:	c1 51       	subi	r28, 0x11	; 17
     926:	df 4f       	sbci	r29, 0xFF	; 255
     928:	e8 81       	ld	r30, Y
     92a:	f9 81       	ldd	r31, Y+1	; 0x01
     92c:	cf 5e       	subi	r28, 0xEF	; 239
     92e:	d0 40       	sbci	r29, 0x00	; 0
     930:	61 91       	ld	r22, Z+
     932:	71 91       	ld	r23, Z+
     934:	c1 51       	subi	r28, 0x11	; 17
     936:	df 4f       	sbci	r29, 0xFF	; 255
     938:	f9 83       	std	Y+1, r31	; 0x01
     93a:	e8 83       	st	Y, r30
     93c:	cf 5e       	subi	r28, 0xEF	; 239
     93e:	d0 40       	sbci	r29, 0x00	; 0
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 47 09 	call	0x128e	; 0x128e <__floatunsisf>
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	4a ef       	ldi	r20, 0xFA	; 250
     952:	5e e3       	ldi	r21, 0x3E	; 62
     954:	0e 94 28 0a 	call	0x1450	; 0x1450 <__mulsf3>
     958:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     95c:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     960:	4b 01       	movw	r8, r22
     962:	5c 01       	movw	r10, r24
			testing[0]=floor(m/100)+INT_TO_ASCII;
     964:	9b 01       	movw	r18, r22
     966:	36 95       	lsr	r19
     968:	27 95       	ror	r18
     96a:	36 95       	lsr	r19
     96c:	27 95       	ror	r18
     96e:	ab e7       	ldi	r26, 0x7B	; 123
     970:	b4 e1       	ldi	r27, 0x14	; 20
     972:	0e 94 9f 0a 	call	0x153e	; 0x153e <__umulhisi3>
     976:	6c 01       	movw	r12, r24
     978:	d6 94       	lsr	r13
     97a:	c7 94       	ror	r12
     97c:	b6 01       	movw	r22, r12
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 47 09 	call	0x128e	; 0x128e <__floatunsisf>
     986:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e4       	ldi	r20, 0x40	; 64
     990:	52 e4       	ldi	r21, 0x42	; 66
     992:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     996:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     99a:	f7 01       	movw	r30, r14
     99c:	60 83       	st	Z, r22
			testing[1]='.';
     99e:	2e e2       	ldi	r18, 0x2E	; 46
     9a0:	21 83       	std	Z+1, r18	; 0x01
			testing[2]=floor((m%100)/10)+INT_TO_ASCII;
     9a2:	34 e6       	ldi	r19, 0x64	; 100
     9a4:	3c 9d       	mul	r19, r12
     9a6:	c0 01       	movw	r24, r0
     9a8:	3d 9d       	mul	r19, r13
     9aa:	90 0d       	add	r25, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	94 01       	movw	r18, r8
     9b0:	28 1b       	sub	r18, r24
     9b2:	39 0b       	sbc	r19, r25
     9b4:	ad ec       	ldi	r26, 0xCD	; 205
     9b6:	bc ec       	ldi	r27, 0xCC	; 204
     9b8:	0e 94 9f 0a 	call	0x153e	; 0x153e <__umulhisi3>
     9bc:	96 95       	lsr	r25
     9be:	87 95       	ror	r24
     9c0:	96 95       	lsr	r25
     9c2:	87 95       	ror	r24
     9c4:	96 95       	lsr	r25
     9c6:	87 95       	ror	r24
     9c8:	bc 01       	movw	r22, r24
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 47 09 	call	0x128e	; 0x128e <__floatunsisf>
     9d2:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e4       	ldi	r20, 0x40	; 64
     9dc:	52 e4       	ldi	r21, 0x42	; 66
     9de:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     9e2:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     9e6:	f7 01       	movw	r30, r14
     9e8:	62 83       	std	Z+2, r22	; 0x02
			testing[3]=m%10+INT_TO_ASCII;
     9ea:	94 01       	movw	r18, r8
     9ec:	ad ec       	ldi	r26, 0xCD	; 205
     9ee:	bc ec       	ldi	r27, 0xCC	; 204
     9f0:	0e 94 9f 0a 	call	0x153e	; 0x153e <__umulhisi3>
     9f4:	96 95       	lsr	r25
     9f6:	87 95       	ror	r24
     9f8:	96 95       	lsr	r25
     9fa:	87 95       	ror	r24
     9fc:	96 95       	lsr	r25
     9fe:	87 95       	ror	r24
     a00:	9c 01       	movw	r18, r24
     a02:	22 0f       	add	r18, r18
     a04:	33 1f       	adc	r19, r19
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	94 01       	movw	r18, r8
     a18:	28 1b       	sub	r18, r24
     a1a:	39 0b       	sbc	r19, r25
     a1c:	c9 01       	movw	r24, r18
     a1e:	80 5d       	subi	r24, 0xD0	; 208
     a20:	83 83       	std	Z+3, r24	; 0x03
			testing[4]='\0';
     a22:	14 82       	std	Z+4, r1	; 0x04
			//
			
			Lcd4_Set_Cursor(2,0);
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
			Lcd4_Write_String(testing);
     a2c:	cb 50       	subi	r28, 0x0B	; 11
     a2e:	df 4f       	sbci	r29, 0xFF	; 255
     a30:	88 81       	ld	r24, Y
     a32:	c5 5f       	subi	r28, 0xF5	; 245
     a34:	d0 40       	sbci	r29, 0x00	; 0
     a36:	ca 50       	subi	r28, 0x0A	; 10
     a38:	df 4f       	sbci	r29, 0xFF	; 255
     a3a:	98 81       	ld	r25, Y
     a3c:	c6 5f       	subi	r28, 0xF6	; 246
     a3e:	d0 40       	sbci	r29, 0x00	; 0
     a40:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
     a44:	c8 01       	movw	r24, r16
     a46:	01 97       	sbiw	r24, 0x01	; 1
			// Blick LED ladder while testing
			if(i%2==0){
     a48:	80 fd       	sbrc	r24, 0
     a4a:	08 c0       	rjmp	.+16     	; 0xa5c <__stack+0x15d>
				HC595Write(led_pattern[8]);
     a4c:	c2 51       	subi	r28, 0x12	; 18
     a4e:	df 4f       	sbci	r29, 0xFF	; 255
     a50:	88 81       	ld	r24, Y
     a52:	ce 5e       	subi	r28, 0xEE	; 238
     a54:	d0 40       	sbci	r29, 0x00	; 0
     a56:	0e 94 28 08 	call	0x1050	; 0x1050 <HC595Write>
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <__stack+0x16b>
			} else {
				HC595Write(led_pattern[7]);
     a5c:	c3 51       	subi	r28, 0x13	; 19
     a5e:	df 4f       	sbci	r29, 0xFF	; 255
     a60:	88 81       	ld	r24, Y
     a62:	cd 5e       	subi	r28, 0xED	; 237
     a64:	d0 40       	sbci	r29, 0x00	; 0
     a66:	0e 94 28 08 	call	0x1050	; 0x1050 <HC595Write>
     a6a:	3f ef       	ldi	r19, 0xFF	; 255
     a6c:	45 ea       	ldi	r20, 0xA5	; 165
     a6e:	8e e0       	ldi	r24, 0x0E	; 14
     a70:	31 50       	subi	r19, 0x01	; 1
     a72:	40 40       	sbci	r20, 0x00	; 0
     a74:	80 40       	sbci	r24, 0x00	; 0
     a76:	e1 f7       	brne	.-8      	; 0xa70 <__stack+0x171>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <__stack+0x17b>
     a7a:	00 00       	nop
		
		///////////////////////////////////////
	
		/////////////// Test //////////////////
				
		for(int i=0;i<numberPoints;i++){
     a7c:	04 33       	cpi	r16, 0x34	; 52
     a7e:	11 05       	cpc	r17, r1
     a80:	09 f0       	breq	.+2      	; 0xa84 <__stack+0x185>
     a82:	42 ce       	rjmp	.-892    	; 0x708 <main+0x1cc>
				HC595Write(led_pattern[7]);
			}
			
			_delay_ms(TEST_DELAY);			
		}
		pot_write(0);
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0e 94 4d 02 	call	0x49a	; 0x49a <pot_write>
		HC595Write(led_pattern[8]);
     a8a:	c2 51       	subi	r28, 0x12	; 18
     a8c:	df 4f       	sbci	r29, 0xFF	; 255
     a8e:	98 81       	ld	r25, Y
     a90:	ce 5e       	subi	r28, 0xEE	; 238
     a92:	d0 40       	sbci	r29, 0x00	; 0
     a94:	c5 50       	subi	r28, 0x05	; 5
     a96:	df 4f       	sbci	r29, 0xFF	; 255
     a98:	98 83       	st	Y, r25
     a9a:	cb 5f       	subi	r28, 0xFB	; 251
     a9c:	d0 40       	sbci	r29, 0x00	; 0
     a9e:	89 2f       	mov	r24, r25
     aa0:	0e 94 28 08 	call	0x1050	; 0x1050 <HC595Write>
     aa4:	c4 50       	subi	r28, 0x04	; 4
     aa6:	df 4f       	sbci	r29, 0xFF	; 255
     aa8:	c8 80       	ld	r12, Y
     aaa:	cc 5f       	subi	r28, 0xFC	; 252
     aac:	d0 40       	sbci	r29, 0x00	; 0
     aae:	c3 50       	subi	r28, 0x03	; 3
     ab0:	df 4f       	sbci	r29, 0xFF	; 255
     ab2:	d8 80       	ld	r13, Y
     ab4:	cd 5f       	subi	r28, 0xFD	; 253
     ab6:	d0 40       	sbci	r29, 0x00	; 0
		/////////// Data analysis //////////////
		
		// Max Current
		maximumCurrent = MAX_CURRENT/10;
		o=numberPoints;
		for (int i=numberPoints-1;i>=0;i--){
     ab8:	03 e3       	ldi	r16, 0x33	; 51
     aba:	10 e0       	ldi	r17, 0x00	; 0
		HC595Write(led_pattern[8]);
		
		/////////// Data analysis //////////////
		
		// Max Current
		maximumCurrent = MAX_CURRENT/10;
     abc:	0f 2e       	mov	r0, r31
     abe:	f8 ec       	ldi	r31, 0xC8	; 200
     ac0:	8f 2e       	mov	r8, r31
     ac2:	91 2c       	mov	r9, r1
     ac4:	f0 2d       	mov	r31, r0
		o=numberPoints;
     ac6:	24 e3       	ldi	r18, 0x34	; 52
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	b4 01       	movw	r22, r8
		for (int i=numberPoints-1;i>=0;i--){
			if (dataVoltage[i]<	CURRENT_VOLTAGE_THRESHOLD){
     acc:	f6 01       	movw	r30, r12
     ace:	92 91       	ld	r25, -Z
     ad0:	82 91       	ld	r24, -Z
     ad2:	6f 01       	movw	r12, r30
     ad4:	8e 35       	cpi	r24, 0x5E	; 94
     ad6:	91 40       	sbci	r25, 0x01	; 1
     ad8:	a0 f4       	brcc	.+40     	; 0xb02 <__stack+0x203>
     ada:	b8 01       	movw	r22, r16
     adc:	6f 5f       	subi	r22, 0xFF	; 255
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
				maximumCurrent = floor((i+1)*3.9);
     ae0:	88 27       	eor	r24, r24
     ae2:	77 fd       	sbrc	r23, 7
     ae4:	80 95       	com	r24
     ae6:	98 2f       	mov	r25, r24
     ae8:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     aec:	2a e9       	ldi	r18, 0x9A	; 154
     aee:	39 e9       	ldi	r19, 0x99	; 153
     af0:	49 e7       	ldi	r20, 0x79	; 121
     af2:	50 e4       	ldi	r21, 0x40	; 64
     af4:	0e 94 28 0a 	call	0x1450	; 0x1450 <__mulsf3>
     af8:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     afc:	0e 94 16 09 	call	0x122c	; 0x122c <__fixsfsi>
     b00:	98 01       	movw	r18, r16
		/////////// Data analysis //////////////
		
		// Max Current
		maximumCurrent = MAX_CURRENT/10;
		o=numberPoints;
		for (int i=numberPoints-1;i>=0;i--){
     b02:	01 50       	subi	r16, 0x01	; 1
     b04:	11 09       	sbc	r17, r1
     b06:	10 f7       	brcc	.-60     	; 0xacc <__stack+0x1cd>
     b08:	4b 01       	movw	r8, r22
		}
		
		// Voltage levels
		maximumVoltage= 0;
		flagVoltage = 0;
		for(int i=0;i<o-PADDING;i++){
     b0a:	c9 01       	movw	r24, r18
     b0c:	05 97       	sbiw	r24, 0x05	; 5
     b0e:	18 16       	cp	r1, r24
     b10:	19 06       	cpc	r1, r25
     b12:	0c f0       	brlt	.+2      	; 0xb16 <__stack+0x217>
     b14:	a5 c0       	rjmp	.+330    	; 0xc60 <__stack+0x361>
     b16:	c9 01       	movw	r24, r18
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	cf 50       	subi	r28, 0x0F	; 15
     b1e:	df 4f       	sbci	r29, 0xFF	; 255
     b20:	99 83       	std	Y+1, r25	; 0x01
     b22:	88 83       	st	Y, r24
     b24:	c1 5f       	subi	r28, 0xF1	; 241
     b26:	d0 40       	sbci	r29, 0x00	; 0
     b28:	c2 50       	subi	r28, 0x02	; 2
     b2a:	df 4f       	sbci	r29, 0xFF	; 255
     b2c:	c8 80       	ld	r12, Y
     b2e:	d9 80       	ldd	r13, Y+1	; 0x01
     b30:	ce 5f       	subi	r28, 0xFE	; 254
     b32:	d0 40       	sbci	r29, 0x00	; 0
     b34:	c8 0e       	add	r12, r24
     b36:	d9 1e       	adc	r13, r25
     b38:	8e 01       	movw	r16, r28
     b3a:	07 59       	subi	r16, 0x97	; 151
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	a1 2c       	mov	r10, r1
     b40:	b1 2c       	mov	r11, r1
     b42:	c1 51       	subi	r28, 0x11	; 17
     b44:	df 4f       	sbci	r29, 0xFF	; 255
     b46:	19 82       	std	Y+1, r1	; 0x01
     b48:	18 82       	st	Y, r1
     b4a:	cf 5e       	subi	r28, 0xEF	; 239
     b4c:	d0 40       	sbci	r29, 0x00	; 0
			temp = floor((dataVoltage[i]+1)*VOLTAGE_SCALE*VOLTAGE_DIVIDER);
			if(temp>VOLTAGE_HIGH){
				flagVoltage = 1;
     b4e:	44 24       	eor	r4, r4
     b50:	43 94       	inc	r4
     b52:	51 2c       	mov	r5, r1
     b54:	c7 50       	subi	r28, 0x07	; 7
     b56:	df 4f       	sbci	r29, 0xFF	; 255
     b58:	79 83       	std	Y+1, r23	; 0x01
     b5a:	68 83       	st	Y, r22
     b5c:	c9 5f       	subi	r28, 0xF9	; 249
     b5e:	d0 40       	sbci	r29, 0x00	; 0
     b60:	81 2c       	mov	r8, r1
     b62:	91 2c       	mov	r9, r1
		
		// Voltage levels
		maximumVoltage= 0;
		flagVoltage = 0;
		for(int i=0;i<o-PADDING;i++){
			temp = floor((dataVoltage[i]+1)*VOLTAGE_SCALE*VOLTAGE_DIVIDER);
     b64:	f8 01       	movw	r30, r16
     b66:	61 91       	ld	r22, Z+
     b68:	71 91       	ld	r23, Z+
     b6a:	8f 01       	movw	r16, r30
     b6c:	6f 5f       	subi	r22, 0xFF	; 255
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 47 09 	call	0x128e	; 0x128e <__floatunsisf>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	4a ef       	ldi	r20, 0xFA	; 250
     b7e:	5e e3       	ldi	r21, 0x3E	; 62
     b80:	0e 94 28 0a 	call	0x1450	; 0x1450 <__mulsf3>
     b84:	9b 01       	movw	r18, r22
     b86:	ac 01       	movw	r20, r24
     b88:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     b8c:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     b90:	0e 94 16 09 	call	0x122c	; 0x122c <__fixsfsi>
     b94:	9b 01       	movw	r18, r22
			if(temp>VOLTAGE_HIGH){
     b96:	67 32       	cpi	r22, 0x27	; 39
     b98:	f2 e0       	ldi	r31, 0x02	; 2
     b9a:	7f 07       	cpc	r23, r31
     b9c:	14 f0       	brlt	.+4      	; 0xba2 <__stack+0x2a3>
				flagVoltage = 1;
     b9e:	84 2c       	mov	r8, r4
     ba0:	95 2c       	mov	r9, r5
     ba2:	a2 16       	cp	r10, r18
     ba4:	b3 06       	cpc	r11, r19
     ba6:	0c f4       	brge	.+2      	; 0xbaa <__stack+0x2ab>
     ba8:	5b 01       	movw	r10, r22
		}
		
		// Voltage levels
		maximumVoltage= 0;
		flagVoltage = 0;
		for(int i=0;i<o-PADDING;i++){
     baa:	0c 15       	cp	r16, r12
     bac:	1d 05       	cpc	r17, r13
     bae:	d1 f6       	brne	.-76     	; 0xb64 <__stack+0x265>
     bb0:	c1 51       	subi	r28, 0x11	; 17
     bb2:	df 4f       	sbci	r29, 0xFF	; 255
     bb4:	99 82       	std	Y+1, r9	; 0x01
     bb6:	88 82       	st	Y, r8
     bb8:	cf 5e       	subi	r28, 0xEF	; 239
     bba:	d0 40       	sbci	r29, 0x00	; 0
     bbc:	c7 50       	subi	r28, 0x07	; 7
     bbe:	df 4f       	sbci	r29, 0xFF	; 255
     bc0:	88 80       	ld	r8, Y
     bc2:	99 80       	ldd	r9, Y+1	; 0x01
     bc4:	c9 5f       	subi	r28, 0xF9	; 249
     bc6:	d0 40       	sbci	r29, 0x00	; 0
     bc8:	cf 50       	subi	r28, 0x0F	; 15
     bca:	df 4f       	sbci	r29, 0xFF	; 255
     bcc:	c8 80       	ld	r12, Y
     bce:	d9 80       	ldd	r13, Y+1	; 0x01
     bd0:	c1 5f       	subi	r28, 0xF1	; 241
     bd2:	d0 40       	sbci	r29, 0x00	; 0
     bd4:	27 ef       	ldi	r18, 0xF7	; 247
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	2c 0f       	add	r18, r28
     bda:	3d 1f       	adc	r19, r29
     bdc:	c2 0e       	add	r12, r18
     bde:	d3 1e       	adc	r13, r19
     be0:	8e 01       	movw	r16, r28
     be2:	0f 5f       	subi	r16, 0xFF	; 255
     be4:	1f 4f       	sbci	r17, 0xFF	; 255
     be6:	41 2c       	mov	r4, r1
     be8:	51 2c       	mov	r5, r1
     bea:	cf 50       	subi	r28, 0x0F	; 15
     bec:	df 4f       	sbci	r29, 0xFF	; 255
     bee:	19 82       	std	Y+1, r1	; 0x01
     bf0:	18 82       	st	Y, r1
     bf2:	c1 5f       	subi	r28, 0xF1	; 241
     bf4:	d0 40       	sbci	r29, 0x00	; 0
		// Ripple Test
		flagRipple = 0;
		for(int i=0;i<o-PADDING;i++){
			temp = floor(dataRipple[i]*RIPPLE_SCALE);
			if(temp>RIPPLE_THRESHOLD){
				flagRipple = 1;
     bf6:	c7 50       	subi	r28, 0x07	; 7
     bf8:	df 4f       	sbci	r29, 0xFF	; 255
     bfa:	b9 82       	std	Y+1, r11	; 0x01
     bfc:	a8 82       	st	Y, r10
     bfe:	c9 5f       	subi	r28, 0xF9	; 249
     c00:	d0 40       	sbci	r29, 0x00	; 0
     c02:	a1 2c       	mov	r10, r1
     c04:	b1 2c       	mov	r11, r1
		}
		maximumRipple = 0;
		// Ripple Test
		flagRipple = 0;
		for(int i=0;i<o-PADDING;i++){
			temp = floor(dataRipple[i]*RIPPLE_SCALE);
     c06:	f8 01       	movw	r30, r16
     c08:	61 91       	ld	r22, Z+
     c0a:	71 91       	ld	r23, Z+
     c0c:	8f 01       	movw	r16, r30
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 47 09 	call	0x128e	; 0x128e <__floatunsisf>
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	4a ef       	ldi	r20, 0xFA	; 250
     c1c:	5e e3       	ldi	r21, 0x3E	; 62
     c1e:	0e 94 28 0a 	call	0x1450	; 0x1450 <__mulsf3>
     c22:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     c26:	0e 94 16 09 	call	0x122c	; 0x122c <__fixsfsi>
     c2a:	9b 01       	movw	r18, r22
			if(temp>RIPPLE_THRESHOLD){
     c2c:	6b 3f       	cpi	r22, 0xFB	; 251
     c2e:	71 05       	cpc	r23, r1
     c30:	1c f0       	brlt	.+6      	; 0xc38 <__stack+0x339>
				flagRipple = 1;
     c32:	aa 24       	eor	r10, r10
     c34:	a3 94       	inc	r10
     c36:	b1 2c       	mov	r11, r1
     c38:	42 16       	cp	r4, r18
     c3a:	53 06       	cpc	r5, r19
     c3c:	0c f4       	brge	.+2      	; 0xc40 <__stack+0x341>
     c3e:	2b 01       	movw	r4, r22
			
		}
		maximumRipple = 0;
		// Ripple Test
		flagRipple = 0;
		for(int i=0;i<o-PADDING;i++){
     c40:	0c 15       	cp	r16, r12
     c42:	1d 05       	cpc	r17, r13
     c44:	01 f7       	brne	.-64     	; 0xc06 <__stack+0x307>
     c46:	cf 50       	subi	r28, 0x0F	; 15
     c48:	df 4f       	sbci	r29, 0xFF	; 255
     c4a:	b9 82       	std	Y+1, r11	; 0x01
     c4c:	a8 82       	st	Y, r10
     c4e:	c1 5f       	subi	r28, 0xF1	; 241
     c50:	d0 40       	sbci	r29, 0x00	; 0
     c52:	c7 50       	subi	r28, 0x07	; 7
     c54:	df 4f       	sbci	r29, 0xFF	; 255
     c56:	a8 80       	ld	r10, Y
     c58:	b9 80       	ldd	r11, Y+1	; 0x01
     c5a:	c9 5f       	subi	r28, 0xF9	; 249
     c5c:	d0 40       	sbci	r29, 0x00	; 0
     c5e:	10 c0       	rjmp	.+32     	; 0xc80 <__stack+0x381>
		}
		
		// Voltage levels
		maximumVoltage= 0;
		flagVoltage = 0;
		for(int i=0;i<o-PADDING;i++){
     c60:	a1 2c       	mov	r10, r1
     c62:	b1 2c       	mov	r11, r1
     c64:	c1 51       	subi	r28, 0x11	; 17
     c66:	df 4f       	sbci	r29, 0xFF	; 255
     c68:	19 82       	std	Y+1, r1	; 0x01
     c6a:	18 82       	st	Y, r1
     c6c:	cf 5e       	subi	r28, 0xEF	; 239
     c6e:	d0 40       	sbci	r29, 0x00	; 0
     c70:	41 2c       	mov	r4, r1
     c72:	51 2c       	mov	r5, r1
     c74:	cf 50       	subi	r28, 0x0F	; 15
     c76:	df 4f       	sbci	r29, 0xFF	; 255
     c78:	19 82       	std	Y+1, r1	; 0x01
     c7a:	18 82       	st	Y, r1
     c7c:	c1 5f       	subi	r28, 0xF1	; 241
     c7e:	d0 40       	sbci	r29, 0x00	; 0
		
			
		////////////////////////////////////////	

		/////////// Display Results ////////////
		Lcd4_Clear();
     c80:	0e 94 a0 01 	call	0x340	; 0x340 <Lcd4_Clear>
		
		// Displaying max current
		Lcd4_Set_Cursor(1,0);
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("MaxCurrent: ");
     c8c:	80 e3       	ldi	r24, 0x30	; 48
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		amps[0]=floor(maximumCurrent/100)+INT_TO_ASCII;
     c94:	c4 01       	movw	r24, r8
     c96:	64 e6       	ldi	r22, 0x64	; 100
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     c9e:	8c 01       	movw	r16, r24
     ca0:	88 27       	eor	r24, r24
     ca2:	77 fd       	sbrc	r23, 7
     ca4:	80 95       	com	r24
     ca6:	98 2f       	mov	r25, r24
     ca8:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     cac:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e4       	ldi	r20, 0x40	; 64
     cb6:	52 e4       	ldi	r21, 0x42	; 66
     cb8:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     cbc:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     cc0:	f3 01       	movw	r30, r6
     cc2:	60 83       	st	Z, r22
		amps[1]='.';
     cc4:	8e e2       	ldi	r24, 0x2E	; 46
     cc6:	81 83       	std	Z+1, r24	; 0x01
		amps[2]=floor((maximumCurrent%100)/10)+INT_TO_ASCII;
     cc8:	c8 01       	movw	r24, r16
     cca:	6a e0       	ldi	r22, 0x0A	; 10
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     cd2:	88 27       	eor	r24, r24
     cd4:	77 fd       	sbrc	r23, 7
     cd6:	80 95       	com	r24
     cd8:	98 2f       	mov	r25, r24
     cda:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     cde:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e4       	ldi	r20, 0x40	; 64
     ce8:	52 e4       	ldi	r21, 0x42	; 66
     cea:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     cee:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     cf2:	f3 01       	movw	r30, r6
     cf4:	62 83       	std	Z+2, r22	; 0x02
		amps[3]='\0';
     cf6:	13 82       	std	Z+3, r1	; 0x03
		Lcd4_Write_String(amps);
     cf8:	cd 50       	subi	r28, 0x0D	; 13
     cfa:	df 4f       	sbci	r29, 0xFF	; 255
     cfc:	88 81       	ld	r24, Y
     cfe:	c3 5f       	subi	r28, 0xF3	; 243
     d00:	d0 40       	sbci	r29, 0x00	; 0
     d02:	cc 50       	subi	r28, 0x0C	; 12
     d04:	df 4f       	sbci	r29, 0xFF	; 255
     d06:	98 81       	ld	r25, Y
     d08:	c4 5f       	subi	r28, 0xF4	; 244
     d0a:	d0 40       	sbci	r29, 0x00	; 0
     d0c:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		Lcd4_Write_Char('A');
     d10:	81 e4       	ldi	r24, 0x41	; 65
     d12:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
		Lcd4_Set_Cursor(2,0);
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		
		// Verbose messages based on signal quality
		if (flagRipple|flagVoltage){
     d1e:	cf 50       	subi	r28, 0x0F	; 15
     d20:	df 4f       	sbci	r29, 0xFF	; 255
     d22:	88 81       	ld	r24, Y
     d24:	99 81       	ldd	r25, Y+1	; 0x01
     d26:	c1 5f       	subi	r28, 0xF1	; 241
     d28:	d0 40       	sbci	r29, 0x00	; 0
     d2a:	c1 51       	subi	r28, 0x11	; 17
     d2c:	df 4f       	sbci	r29, 0xFF	; 255
     d2e:	28 81       	ld	r18, Y
     d30:	39 81       	ldd	r19, Y+1	; 0x01
     d32:	cf 5e       	subi	r28, 0xEF	; 239
     d34:	d0 40       	sbci	r29, 0x00	; 0
     d36:	82 2b       	or	r24, r18
     d38:	93 2b       	or	r25, r19
     d3a:	89 2b       	or	r24, r25
     d3c:	29 f0       	breq	.+10     	; 0xd48 <__stack+0x449>
			Lcd4_Write_String("Danger");
     d3e:	8d e3       	ldi	r24, 0x3D	; 61
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <__stack+0x451>
		} else{	
			Lcd4_Write_String("Good");
     d48:	84 e4       	ldi	r24, 0x44	; 68
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		}
		
		//LED ladder based on max current and signal quality
		n = floor(maximumCurrent*8/200);
     d50:	c4 01       	movw	r24, r8
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	68 ec       	ldi	r22, 0xC8	; 200
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     d66:	88 27       	eor	r24, r24
     d68:	77 fd       	sbrc	r23, 7
     d6a:	80 95       	com	r24
     d6c:	98 2f       	mov	r25, r24
     d6e:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     d72:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
		if(flagVoltage||flagRipple){
     d76:	c1 51       	subi	r28, 0x11	; 17
     d78:	df 4f       	sbci	r29, 0xFF	; 255
     d7a:	e8 81       	ld	r30, Y
     d7c:	f9 81       	ldd	r31, Y+1	; 0x01
     d7e:	cf 5e       	subi	r28, 0xEF	; 239
     d80:	d0 40       	sbci	r29, 0x00	; 0
     d82:	ef 2b       	or	r30, r31
     d84:	41 f4       	brne	.+16     	; 0xd96 <__stack+0x497>
     d86:	cf 50       	subi	r28, 0x0F	; 15
     d88:	df 4f       	sbci	r29, 0xFF	; 255
     d8a:	28 81       	ld	r18, Y
     d8c:	39 81       	ldd	r19, Y+1	; 0x01
     d8e:	c1 5f       	subi	r28, 0xF1	; 241
     d90:	d0 40       	sbci	r29, 0x00	; 0
     d92:	23 2b       	or	r18, r19
     d94:	41 f0       	breq	.+16     	; 0xda6 <__stack+0x4a7>
			HC595Write(led_pattern[8]);
     d96:	c5 50       	subi	r28, 0x05	; 5
     d98:	df 4f       	sbci	r29, 0xFF	; 255
     d9a:	88 81       	ld	r24, Y
     d9c:	cb 5f       	subi	r28, 0xFB	; 251
     d9e:	d0 40       	sbci	r29, 0x00	; 0
     da0:	0e 94 28 08 	call	0x1050	; 0x1050 <HC595Write>
     da4:	0d c0       	rjmp	.+26     	; 0xdc0 <__stack+0x4c1>
		} else{	
			Lcd4_Write_String("Good");
		}
		
		//LED ladder based on max current and signal quality
		n = floor(maximumCurrent*8/200);
     da6:	0e 94 16 09 	call	0x122c	; 0x122c <__fixsfsi>
		if(flagVoltage||flagRipple){
			HC595Write(led_pattern[8]);
		} else {
			HC595Write(led_pattern[n-1]);
     daa:	e6 ee       	ldi	r30, 0xE6	; 230
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	ec 0f       	add	r30, r28
     db0:	fd 1f       	adc	r31, r29
     db2:	6e 0f       	add	r22, r30
     db4:	7f 1f       	adc	r23, r31
     db6:	fb 01       	movw	r30, r22
     db8:	31 97       	sbiw	r30, 0x01	; 1
     dba:	80 81       	ld	r24, Z
     dbc:	0e 94 28 08 	call	0x1050	; 0x1050 <HC595Write>
		}
	
		////////////////////////////////////////
		
		/////////// More & Reset ///////////////
		Lcd4_Set_Cursor(2,11);
     dc0:	6b e0       	ldi	r22, 0x0B	; 11
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("Next");
     dc8:	89 e4       	ldi	r24, 0x49	; 73
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		Lcd4_Write_Char(0b01111110);
     dd0:	8e e7       	ldi	r24, 0x7E	; 126
     dd2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
		
		// wait for button press
		while((PINB & (1<<PB1))==0){
     dd6:	19 9b       	sbis	0x03, 1	; 3
     dd8:	fe cf       	rjmp	.-4      	; 0xdd6 <__stack+0x4d7>
		}
		
		//reset timer. and flag
		timer_flag = 0;
     dda:	10 92 6f 01 	sts	0x016F, r1
     dde:	10 92 6e 01 	sts	0x016E, r1
		reset_flag = 0;
		TCNT1 = 0;
     de2:	10 92 85 00 	sts	0x0085, r1
     de6:	10 92 84 00 	sts	0x0084, r1
		
		// test how long button is pressed. if held longer than 1 sec, break and reset
		while((PINB & (1<<PB1))==2){
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <__stack+0x4fb>
			if(timer_flag == 1){
     dec:	80 91 6e 01 	lds	r24, 0x016E
     df0:	90 91 6f 01 	lds	r25, 0x016F
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	09 f4       	brne	.+2      	; 0xdfa <__stack+0x4fb>
     df8:	1d cc       	rjmp	.-1990   	; 0x634 <main+0xf8>
		timer_flag = 0;
		reset_flag = 0;
		TCNT1 = 0;
		
		// test how long button is pressed. if held longer than 1 sec, break and reset
		while((PINB & (1<<PB1))==2){
     dfa:	19 99       	sbic	0x03, 1	; 3
     dfc:	f7 cf       	rjmp	.-18     	; 0xdec <__stack+0x4ed>
     dfe:	4c c0       	rjmp	.+152    	; 0xe98 <__stack+0x599>
		Lcd4_Write_String(testing);
		Lcd4_Write_Char('V');
		Lcd4_Set_Cursor(2,0);	

		if(flagVoltage){
			HC595Write(led_pattern[8]);
     e00:	c2 51       	subi	r28, 0x12	; 18
     e02:	df 4f       	sbci	r29, 0xFF	; 255
     e04:	88 81       	ld	r24, Y
     e06:	ce 5e       	subi	r28, 0xEE	; 238
     e08:	d0 40       	sbci	r29, 0x00	; 0
     e0a:	0e 94 28 08 	call	0x1050	; 0x1050 <HC595Write>
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <__stack+0x51f>
		} else {
			HC595Write(led_pattern[7]);
     e10:	c3 51       	subi	r28, 0x13	; 19
     e12:	df 4f       	sbci	r29, 0xFF	; 255
     e14:	88 81       	ld	r24, Y
     e16:	cd 5e       	subi	r28, 0xED	; 237
     e18:	d0 40       	sbci	r29, 0x00	; 0
     e1a:	0e 94 28 08 	call	0x1050	; 0x1050 <HC595Write>
		}
		
		/////////// More & Reset ///////////////
		Lcd4_Set_Cursor(2,11);
     e1e:	6b e0       	ldi	r22, 0x0B	; 11
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("Next");
     e26:	89 e4       	ldi	r24, 0x49	; 73
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		Lcd4_Write_Char(0b01111110);
     e2e:	8e e7       	ldi	r24, 0x7E	; 126
     e30:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
		
		// wait for button press
		while((PINB & (1<<PB1))==0){
     e34:	19 9b       	sbis	0x03, 1	; 3
     e36:	fe cf       	rjmp	.-4      	; 0xe34 <__stack+0x535>
		}
		
		//reset timer. and flag
		timer_flag = 0;
     e38:	10 92 6f 01 	sts	0x016F, r1
     e3c:	10 92 6e 01 	sts	0x016E, r1
		reset_flag = 0;
		TCNT1 = 0;
     e40:	10 92 85 00 	sts	0x0085, r1
     e44:	10 92 84 00 	sts	0x0084, r1
		
		// test how long button is pressed. if held longer than 1 sec, break and reset
		while((PINB & (1<<PB1))==2){
     e48:	07 c0       	rjmp	.+14     	; 0xe58 <__stack+0x559>
			if(timer_flag == 1){
     e4a:	80 91 6e 01 	lds	r24, 0x016E
     e4e:	90 91 6f 01 	lds	r25, 0x016F
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	09 f4       	brne	.+2      	; 0xe58 <__stack+0x559>
     e56:	ee cb       	rjmp	.-2084   	; 0x634 <main+0xf8>
		timer_flag = 0;
		reset_flag = 0;
		TCNT1 = 0;
		
		// test how long button is pressed. if held longer than 1 sec, break and reset
		while((PINB & (1<<PB1))==2){
     e58:	19 99       	sbic	0x03, 1	; 3
     e5a:	f7 cf       	rjmp	.-18     	; 0xe4a <__stack+0x54b>
     e5c:	79 c0       	rjmp	.+242    	; 0xf50 <__stack+0x651>
		Lcd4_Write_String(testing);
		Lcd4_Write_Char('V');
		Lcd4_Set_Cursor(2,0);

		if(flagRipple){
			HC595Write(led_pattern[8]);
     e5e:	c2 51       	subi	r28, 0x12	; 18
     e60:	df 4f       	sbci	r29, 0xFF	; 255
     e62:	88 81       	ld	r24, Y
     e64:	ce 5e       	subi	r28, 0xEE	; 238
     e66:	d0 40       	sbci	r29, 0x00	; 0
     e68:	0e 94 28 08 	call	0x1050	; 0x1050 <HC595Write>
     e6c:	07 c0       	rjmp	.+14     	; 0xe7c <__stack+0x57d>
			} else {
			HC595Write(led_pattern[7]);
     e6e:	c3 51       	subi	r28, 0x13	; 19
     e70:	df 4f       	sbci	r29, 0xFF	; 255
     e72:	88 81       	ld	r24, Y
     e74:	cd 5e       	subi	r28, 0xED	; 237
     e76:	d0 40       	sbci	r29, 0x00	; 0
     e78:	0e 94 28 08 	call	0x1050	; 0x1050 <HC595Write>
		}
		
		/////////// More & Reset ///////////////
		Lcd4_Set_Cursor(2,10);
     e7c:	6a e0       	ldi	r22, 0x0A	; 10
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("Reset");
     e84:	8e e4       	ldi	r24, 0x4E	; 78
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		Lcd4_Write_Char(0b01111110);
     e8c:	8e e7       	ldi	r24, 0x7E	; 126
     e8e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
		
		// wait for button press
		while((PINB & (1<<PB1))==0){
     e92:	19 9b       	sbis	0x03, 1	; 3
     e94:	fe cf       	rjmp	.-4      	; 0xe92 <__stack+0x593>
     e96:	ba cb       	rjmp	.-2188   	; 0x60c <main+0xd0>
     e98:	c5 01       	movw	r24, r10
     e9a:	52 01       	movw	r10, r4
     e9c:	2c 01       	movw	r4, r24
		}
	
		if(reset_flag)
			continue;
			
		Lcd4_Clear();
     e9e:	0e 94 a0 01 	call	0x340	; 0x340 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("MaxVoltage: ");
     eaa:	84 e5       	ldi	r24, 0x54	; 84
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		testing[0]=floor(maximumVoltage/100)+INT_TO_ASCII;
     eb2:	c2 01       	movw	r24, r4
     eb4:	64 e6       	ldi	r22, 0x64	; 100
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     ebc:	8c 01       	movw	r16, r24
     ebe:	88 27       	eor	r24, r24
     ec0:	77 fd       	sbrc	r23, 7
     ec2:	80 95       	com	r24
     ec4:	98 2f       	mov	r25, r24
     ec6:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     eca:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e4       	ldi	r20, 0x40	; 64
     ed4:	52 e4       	ldi	r21, 0x42	; 66
     ed6:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     eda:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     ede:	f7 01       	movw	r30, r14
     ee0:	60 83       	st	Z, r22
		testing[1]='.';
     ee2:	8e e2       	ldi	r24, 0x2E	; 46
     ee4:	81 83       	std	Z+1, r24	; 0x01
		testing[2]=floor((maximumVoltage%100)/10)+INT_TO_ASCII;
     ee6:	c8 01       	movw	r24, r16
     ee8:	6a e0       	ldi	r22, 0x0A	; 10
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     ef0:	88 27       	eor	r24, r24
     ef2:	77 fd       	sbrc	r23, 7
     ef4:	80 95       	com	r24
     ef6:	98 2f       	mov	r25, r24
     ef8:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     efc:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e4       	ldi	r20, 0x40	; 64
     f06:	52 e4       	ldi	r21, 0x42	; 66
     f08:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     f0c:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     f10:	f7 01       	movw	r30, r14
     f12:	62 83       	std	Z+2, r22	; 0x02
		testing[3]='\0';
     f14:	13 82       	std	Z+3, r1	; 0x03
		Lcd4_Write_String(testing);
     f16:	c4 50       	subi	r28, 0x04	; 4
     f18:	df 4f       	sbci	r29, 0xFF	; 255
     f1a:	88 81       	ld	r24, Y
     f1c:	cc 5f       	subi	r28, 0xFC	; 252
     f1e:	d0 40       	sbci	r29, 0x00	; 0
     f20:	c3 50       	subi	r28, 0x03	; 3
     f22:	df 4f       	sbci	r29, 0xFF	; 255
     f24:	98 81       	ld	r25, Y
     f26:	cd 5f       	subi	r28, 0xFD	; 253
     f28:	d0 40       	sbci	r29, 0x00	; 0
     f2a:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		Lcd4_Write_Char('V');
     f2e:	86 e5       	ldi	r24, 0x56	; 86
     f30:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
		Lcd4_Set_Cursor(2,0);	
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>

		if(flagVoltage){
     f3c:	c1 51       	subi	r28, 0x11	; 17
     f3e:	df 4f       	sbci	r29, 0xFF	; 255
     f40:	28 81       	ld	r18, Y
     f42:	39 81       	ldd	r19, Y+1	; 0x01
     f44:	cf 5e       	subi	r28, 0xEF	; 239
     f46:	d0 40       	sbci	r29, 0x00	; 0
     f48:	23 2b       	or	r18, r19
     f4a:	09 f0       	breq	.+2      	; 0xf4e <__stack+0x64f>
     f4c:	59 cf       	rjmp	.-334    	; 0xe00 <__stack+0x501>
     f4e:	60 cf       	rjmp	.-320    	; 0xe10 <__stack+0x511>
			if (temp>maximumRipple){
				maximumRipple = temp;
			}
		}
		
		maximumRipple = maximumRipple/RIPPLE_REVERSE;
     f50:	b5 01       	movw	r22, r10
     f52:	88 27       	eor	r24, r24
     f54:	77 fd       	sbrc	r23, 7
     f56:	80 95       	com	r24
     f58:	98 2f       	mov	r25, r24
     f5a:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     f5e:	2b e7       	ldi	r18, 0x7B	; 123
     f60:	34 e1       	ldi	r19, 0x14	; 20
     f62:	4e ea       	ldi	r20, 0xAE	; 174
     f64:	50 e4       	ldi	r21, 0x40	; 64
     f66:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     f6a:	0e 94 16 09 	call	0x122c	; 0x122c <__fixsfsi>
     f6e:	6b 01       	movw	r12, r22
		}
		
		if(reset_flag)
		continue;
		
		Lcd4_Clear();
     f70:	0e 94 a0 01 	call	0x340	; 0x340 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("MaxRipple: ");
     f7c:	81 e6       	ldi	r24, 0x61	; 97
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		testing[0]=floor(maximumRipple/100)+INT_TO_ASCII;
     f84:	c6 01       	movw	r24, r12
     f86:	64 e6       	ldi	r22, 0x64	; 100
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     f8e:	5c 01       	movw	r10, r24
     f90:	88 27       	eor	r24, r24
     f92:	77 fd       	sbrc	r23, 7
     f94:	80 95       	com	r24
     f96:	98 2f       	mov	r25, r24
     f98:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     f9c:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e4       	ldi	r20, 0x40	; 64
     fa6:	52 e4       	ldi	r21, 0x42	; 66
     fa8:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     fac:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     fb0:	f7 01       	movw	r30, r14
     fb2:	60 83       	st	Z, r22
		testing[1]='.';
     fb4:	8e e2       	ldi	r24, 0x2E	; 46
     fb6:	81 83       	std	Z+1, r24	; 0x01
		testing[2]=floor((maximumRipple%100)/10)+INT_TO_ASCII;
     fb8:	0a e0       	ldi	r16, 0x0A	; 10
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	c5 01       	movw	r24, r10
     fbe:	b8 01       	movw	r22, r16
     fc0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     fc4:	88 27       	eor	r24, r24
     fc6:	77 fd       	sbrc	r23, 7
     fc8:	80 95       	com	r24
     fca:	98 2f       	mov	r25, r24
     fcc:	0e 94 49 09 	call	0x1292	; 0x1292 <__floatsisf>
     fd0:	0e 94 84 09 	call	0x1308	; 0x1308 <floor>
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e4       	ldi	r20, 0x40	; 64
     fda:	52 e4       	ldi	r21, 0x42	; 66
     fdc:	0e 94 4a 08 	call	0x1094	; 0x1094 <__addsf3>
     fe0:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
     fe4:	f7 01       	movw	r30, r14
     fe6:	62 83       	std	Z+2, r22	; 0x02
		testing[3]=maximumRipple%10+INT_TO_ASCII;
     fe8:	c6 01       	movw	r24, r12
     fea:	b8 01       	movw	r22, r16
     fec:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     ff0:	80 5d       	subi	r24, 0xD0	; 208
     ff2:	83 83       	std	Z+3, r24	; 0x03
		testing[4]='\0';
     ff4:	14 82       	std	Z+4, r1	; 0x04
		Lcd4_Write_String(testing);
     ff6:	c4 50       	subi	r28, 0x04	; 4
     ff8:	df 4f       	sbci	r29, 0xFF	; 255
     ffa:	88 81       	ld	r24, Y
     ffc:	cc 5f       	subi	r28, 0xFC	; 252
     ffe:	d0 40       	sbci	r29, 0x00	; 0
    1000:	c3 50       	subi	r28, 0x03	; 3
    1002:	df 4f       	sbci	r29, 0xFF	; 255
    1004:	98 81       	ld	r25, Y
    1006:	cd 5f       	subi	r28, 0xFD	; 253
    1008:	d0 40       	sbci	r29, 0x00	; 0
    100a:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		Lcd4_Write_Char('V');
    100e:	86 e5       	ldi	r24, 0x56	; 86
    1010:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
		Lcd4_Set_Cursor(2,0);
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>

		if(flagRipple){
    101c:	cf 50       	subi	r28, 0x0F	; 15
    101e:	df 4f       	sbci	r29, 0xFF	; 255
    1020:	28 81       	ld	r18, Y
    1022:	39 81       	ldd	r19, Y+1	; 0x01
    1024:	c1 5f       	subi	r28, 0xF1	; 241
    1026:	d0 40       	sbci	r29, 0x00	; 0
    1028:	23 2b       	or	r18, r19
    102a:	09 f0       	breq	.+2      	; 0x102e <__stack+0x72f>
    102c:	18 cf       	rjmp	.-464    	; 0xe5e <__stack+0x55f>
    102e:	1f cf       	rjmp	.-450    	; 0xe6e <__stack+0x56f>

00001030 <HC595Init>:
//Initialize HC595 System

void HC595Init()
{
   //Make the Data(DS), Shift clock (SH_CP), Store Clock (ST_CP) lines output
   HC595_DDR|=((1<<HC595_SH_CP_POS)|(1<<HC595_ST_CP_POS)|(1<<HC595_DS_POS));
    1030:	8a b1       	in	r24, 0x0a	; 10
    1032:	80 6e       	ori	r24, 0xE0	; 224
    1034:	8a b9       	out	0x0a, r24	; 10
    1036:	08 95       	ret

00001038 <HC595Pulse>:
//Sends a clock pulse on SH_CP line
void HC595Pulse()
{
   //Pulse the Shift Clock

   HC595_PORT|=(1<<HC595_SH_CP_POS);//HIGH
    1038:	5e 9a       	sbi	0x0b, 6	; 11

   HC595_PORT&=(~(1<<HC595_SH_CP_POS));//LOW
    103a:	5e 98       	cbi	0x0b, 6	; 11
    103c:	08 95       	ret

0000103e <HC595Latch>:
//Sends a clock pulse on ST_CP line
void HC595Latch()
{
   //Pulse the Store Clock

   HC595_PORT|=(1<<HC595_ST_CP_POS);//HIGH
    103e:	5f 9a       	sbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	8a 95       	dec	r24
    1044:	f1 f7       	brne	.-4      	; 0x1042 <HC595Latch+0x4>
   _delay_loop_1(1);

   HC595_PORT&=(~(1<<HC595_ST_CP_POS));//LOW
    1046:	5f 98       	cbi	0x0b, 7	; 11
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	8a 95       	dec	r24
    104c:	f1 f7       	brne	.-4      	; 0x104a <HC595Latch+0xc>
    104e:	08 95       	ret

00001050 <HC595Write>:
   and then latched. The byte is then available on
   output line Q0 to Q7 of the HC595 IC.

*/
void HC595Write(uint8_t data)
{
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	d8 2f       	mov	r29, r24
    1056:	c8 e0       	ldi	r28, 0x08	; 8
   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
   {
      //Output the data on DS line according to the
      //Value of MSB
      if(data & 0b10000000)
    1058:	dd 23       	and	r29, r29
    105a:	14 f4       	brge	.+4      	; 0x1060 <HC595Write+0x10>
      {
         //MSB is 1 so output high

         HC595DataHigh();
    105c:	5d 9a       	sbi	0x0b, 5	; 11
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <HC595Write+0x12>
      }
      else
      {
         //MSB is 0 so output high
         HC595DataLow();
    1060:	5d 98       	cbi	0x0b, 5	; 11
      }

      HC595Pulse();  //Pulse the Clock line
    1062:	0e 94 1c 08 	call	0x1038	; 0x1038 <HC595Pulse>
      data=data<<1;  //Now bring next bit at MSB position
    1066:	dd 0f       	add	r29, r29
    1068:	c1 50       	subi	r28, 0x01	; 1
void HC595Write(uint8_t data)
{
   //Send each 8 bits serially

   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
    106a:	b1 f7       	brne	.-20     	; 0x1058 <HC595Write+0x8>

   }

   //Now all 8 bits have been transferred to shift register
   //Move them to output latch at one
   HC595Latch();
    106c:	0e 94 1f 08 	call	0x103e	; 0x103e <HC595Latch>
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <spi_init>:
#include <avr/io.h>


void spi_init(void){
	//Set SS SCLK and MOSI as output
	DDRB |= (1<<DDB2)|(1<<DDB3)|(1<<DDB5);
    1076:	84 b1       	in	r24, 0x04	; 4
    1078:	8c 62       	ori	r24, 0x2C	; 44
    107a:	84 b9       	out	0x04, r24	; 4
	
	//Set the SPI Control Register
	SPCR = (1<<SPE)|(1<<MSTR);
    107c:	80 e5       	ldi	r24, 0x50	; 80
    107e:	8c bd       	out	0x2c, r24	; 44
	//volatile char IOReg;
	//IOReg   = SPSR;  // clear SPIF bit in SPSR
	//IOReg   = SPDR;
	//Disable SS
	PORTB |= (1<<PORTB2); 
    1080:	2a 9a       	sbi	0x05, 2	; 5
    1082:	08 95       	ret

00001084 <spi_data>:
}

unsigned char spi_data(unsigned char data){
	//SS enable (Active LOW)
	PORTB &= ~(1<<PORTB2); 
    1084:	2a 98       	cbi	0x05, 2	; 5
	//Load data
	SPDR = data;
    1086:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR&(1<<SPIF))){
    1088:	0d b4       	in	r0, 0x2d	; 45
    108a:	07 fe       	sbrs	r0, 7
    108c:	fd cf       	rjmp	.-6      	; 0x1088 <spi_data+0x4>
		
	}
	return(SPDR);
    108e:	8e b5       	in	r24, 0x2e	; 46
	//SS Disable
	PORTB |= (1<<PORTB2); 
    1090:	08 95       	ret

00001092 <__subsf3>:
    1092:	50 58       	subi	r21, 0x80	; 128

00001094 <__addsf3>:
    1094:	bb 27       	eor	r27, r27
    1096:	aa 27       	eor	r26, r26
    1098:	0e d0       	rcall	.+28     	; 0x10b6 <__addsf3x>
    109a:	89 c1       	rjmp	.+786    	; 0x13ae <__fp_round>
    109c:	7a d1       	rcall	.+756    	; 0x1392 <__fp_pscA>
    109e:	30 f0       	brcs	.+12     	; 0x10ac <__addsf3+0x18>
    10a0:	7f d1       	rcall	.+766    	; 0x13a0 <__fp_pscB>
    10a2:	20 f0       	brcs	.+8      	; 0x10ac <__addsf3+0x18>
    10a4:	31 f4       	brne	.+12     	; 0x10b2 <__addsf3+0x1e>
    10a6:	9f 3f       	cpi	r25, 0xFF	; 255
    10a8:	11 f4       	brne	.+4      	; 0x10ae <__addsf3+0x1a>
    10aa:	1e f4       	brtc	.+6      	; 0x10b2 <__addsf3+0x1e>
    10ac:	6f c1       	rjmp	.+734    	; 0x138c <__fp_nan>
    10ae:	0e f4       	brtc	.+2      	; 0x10b2 <__addsf3+0x1e>
    10b0:	e0 95       	com	r30
    10b2:	e7 fb       	bst	r30, 7
    10b4:	3c c1       	rjmp	.+632    	; 0x132e <__fp_inf>

000010b6 <__addsf3x>:
    10b6:	e9 2f       	mov	r30, r25
    10b8:	8b d1       	rcall	.+790    	; 0x13d0 <__fp_split3>
    10ba:	80 f3       	brcs	.-32     	; 0x109c <__addsf3+0x8>
    10bc:	ba 17       	cp	r27, r26
    10be:	62 07       	cpc	r22, r18
    10c0:	73 07       	cpc	r23, r19
    10c2:	84 07       	cpc	r24, r20
    10c4:	95 07       	cpc	r25, r21
    10c6:	18 f0       	brcs	.+6      	; 0x10ce <__addsf3x+0x18>
    10c8:	71 f4       	brne	.+28     	; 0x10e6 <__addsf3x+0x30>
    10ca:	9e f5       	brtc	.+102    	; 0x1132 <__addsf3x+0x7c>
    10cc:	ba c1       	rjmp	.+884    	; 0x1442 <__fp_zero>
    10ce:	0e f4       	brtc	.+2      	; 0x10d2 <__addsf3x+0x1c>
    10d0:	e0 95       	com	r30
    10d2:	0b 2e       	mov	r0, r27
    10d4:	ba 2f       	mov	r27, r26
    10d6:	a0 2d       	mov	r26, r0
    10d8:	0b 01       	movw	r0, r22
    10da:	b9 01       	movw	r22, r18
    10dc:	90 01       	movw	r18, r0
    10de:	0c 01       	movw	r0, r24
    10e0:	ca 01       	movw	r24, r20
    10e2:	a0 01       	movw	r20, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	ff 27       	eor	r31, r31
    10e8:	59 1b       	sub	r21, r25
    10ea:	99 f0       	breq	.+38     	; 0x1112 <__addsf3x+0x5c>
    10ec:	59 3f       	cpi	r21, 0xF9	; 249
    10ee:	50 f4       	brcc	.+20     	; 0x1104 <__addsf3x+0x4e>
    10f0:	50 3e       	cpi	r21, 0xE0	; 224
    10f2:	68 f1       	brcs	.+90     	; 0x114e <__addsf3x+0x98>
    10f4:	1a 16       	cp	r1, r26
    10f6:	f0 40       	sbci	r31, 0x00	; 0
    10f8:	a2 2f       	mov	r26, r18
    10fa:	23 2f       	mov	r18, r19
    10fc:	34 2f       	mov	r19, r20
    10fe:	44 27       	eor	r20, r20
    1100:	58 5f       	subi	r21, 0xF8	; 248
    1102:	f3 cf       	rjmp	.-26     	; 0x10ea <__addsf3x+0x34>
    1104:	46 95       	lsr	r20
    1106:	37 95       	ror	r19
    1108:	27 95       	ror	r18
    110a:	a7 95       	ror	r26
    110c:	f0 40       	sbci	r31, 0x00	; 0
    110e:	53 95       	inc	r21
    1110:	c9 f7       	brne	.-14     	; 0x1104 <__addsf3x+0x4e>
    1112:	7e f4       	brtc	.+30     	; 0x1132 <__addsf3x+0x7c>
    1114:	1f 16       	cp	r1, r31
    1116:	ba 0b       	sbc	r27, r26
    1118:	62 0b       	sbc	r22, r18
    111a:	73 0b       	sbc	r23, r19
    111c:	84 0b       	sbc	r24, r20
    111e:	ba f0       	brmi	.+46     	; 0x114e <__addsf3x+0x98>
    1120:	91 50       	subi	r25, 0x01	; 1
    1122:	a1 f0       	breq	.+40     	; 0x114c <__addsf3x+0x96>
    1124:	ff 0f       	add	r31, r31
    1126:	bb 1f       	adc	r27, r27
    1128:	66 1f       	adc	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	c2 f7       	brpl	.-16     	; 0x1120 <__addsf3x+0x6a>
    1130:	0e c0       	rjmp	.+28     	; 0x114e <__addsf3x+0x98>
    1132:	ba 0f       	add	r27, r26
    1134:	62 1f       	adc	r22, r18
    1136:	73 1f       	adc	r23, r19
    1138:	84 1f       	adc	r24, r20
    113a:	48 f4       	brcc	.+18     	; 0x114e <__addsf3x+0x98>
    113c:	87 95       	ror	r24
    113e:	77 95       	ror	r23
    1140:	67 95       	ror	r22
    1142:	b7 95       	ror	r27
    1144:	f7 95       	ror	r31
    1146:	9e 3f       	cpi	r25, 0xFE	; 254
    1148:	08 f0       	brcs	.+2      	; 0x114c <__addsf3x+0x96>
    114a:	b3 cf       	rjmp	.-154    	; 0x10b2 <__addsf3+0x1e>
    114c:	93 95       	inc	r25
    114e:	88 0f       	add	r24, r24
    1150:	08 f0       	brcs	.+2      	; 0x1154 <__addsf3x+0x9e>
    1152:	99 27       	eor	r25, r25
    1154:	ee 0f       	add	r30, r30
    1156:	97 95       	ror	r25
    1158:	87 95       	ror	r24
    115a:	08 95       	ret

0000115c <__divsf3>:
    115c:	0c d0       	rcall	.+24     	; 0x1176 <__divsf3x>
    115e:	27 c1       	rjmp	.+590    	; 0x13ae <__fp_round>
    1160:	1f d1       	rcall	.+574    	; 0x13a0 <__fp_pscB>
    1162:	40 f0       	brcs	.+16     	; 0x1174 <__divsf3+0x18>
    1164:	16 d1       	rcall	.+556    	; 0x1392 <__fp_pscA>
    1166:	30 f0       	brcs	.+12     	; 0x1174 <__divsf3+0x18>
    1168:	21 f4       	brne	.+8      	; 0x1172 <__divsf3+0x16>
    116a:	5f 3f       	cpi	r21, 0xFF	; 255
    116c:	19 f0       	breq	.+6      	; 0x1174 <__divsf3+0x18>
    116e:	df c0       	rjmp	.+446    	; 0x132e <__fp_inf>
    1170:	51 11       	cpse	r21, r1
    1172:	68 c1       	rjmp	.+720    	; 0x1444 <__fp_szero>
    1174:	0b c1       	rjmp	.+534    	; 0x138c <__fp_nan>

00001176 <__divsf3x>:
    1176:	2c d1       	rcall	.+600    	; 0x13d0 <__fp_split3>
    1178:	98 f3       	brcs	.-26     	; 0x1160 <__divsf3+0x4>

0000117a <__divsf3_pse>:
    117a:	99 23       	and	r25, r25
    117c:	c9 f3       	breq	.-14     	; 0x1170 <__divsf3+0x14>
    117e:	55 23       	and	r21, r21
    1180:	b1 f3       	breq	.-20     	; 0x116e <__divsf3+0x12>
    1182:	95 1b       	sub	r25, r21
    1184:	55 0b       	sbc	r21, r21
    1186:	bb 27       	eor	r27, r27
    1188:	aa 27       	eor	r26, r26
    118a:	62 17       	cp	r22, r18
    118c:	73 07       	cpc	r23, r19
    118e:	84 07       	cpc	r24, r20
    1190:	38 f0       	brcs	.+14     	; 0x11a0 <__divsf3_pse+0x26>
    1192:	9f 5f       	subi	r25, 0xFF	; 255
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	44 1f       	adc	r20, r20
    119c:	aa 1f       	adc	r26, r26
    119e:	a9 f3       	breq	.-22     	; 0x118a <__divsf3_pse+0x10>
    11a0:	33 d0       	rcall	.+102    	; 0x1208 <__divsf3_pse+0x8e>
    11a2:	0e 2e       	mov	r0, r30
    11a4:	3a f0       	brmi	.+14     	; 0x11b4 <__divsf3_pse+0x3a>
    11a6:	e0 e8       	ldi	r30, 0x80	; 128
    11a8:	30 d0       	rcall	.+96     	; 0x120a <__divsf3_pse+0x90>
    11aa:	91 50       	subi	r25, 0x01	; 1
    11ac:	50 40       	sbci	r21, 0x00	; 0
    11ae:	e6 95       	lsr	r30
    11b0:	00 1c       	adc	r0, r0
    11b2:	ca f7       	brpl	.-14     	; 0x11a6 <__divsf3_pse+0x2c>
    11b4:	29 d0       	rcall	.+82     	; 0x1208 <__divsf3_pse+0x8e>
    11b6:	fe 2f       	mov	r31, r30
    11b8:	27 d0       	rcall	.+78     	; 0x1208 <__divsf3_pse+0x8e>
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	bb 1f       	adc	r27, r27
    11c2:	26 17       	cp	r18, r22
    11c4:	37 07       	cpc	r19, r23
    11c6:	48 07       	cpc	r20, r24
    11c8:	ab 07       	cpc	r26, r27
    11ca:	b0 e8       	ldi	r27, 0x80	; 128
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <__divsf3_pse+0x56>
    11ce:	bb 0b       	sbc	r27, r27
    11d0:	80 2d       	mov	r24, r0
    11d2:	bf 01       	movw	r22, r30
    11d4:	ff 27       	eor	r31, r31
    11d6:	93 58       	subi	r25, 0x83	; 131
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	2a f0       	brmi	.+10     	; 0x11e6 <__divsf3_pse+0x6c>
    11dc:	9e 3f       	cpi	r25, 0xFE	; 254
    11de:	51 05       	cpc	r21, r1
    11e0:	68 f0       	brcs	.+26     	; 0x11fc <__divsf3_pse+0x82>
    11e2:	a5 c0       	rjmp	.+330    	; 0x132e <__fp_inf>
    11e4:	2f c1       	rjmp	.+606    	; 0x1444 <__fp_szero>
    11e6:	5f 3f       	cpi	r21, 0xFF	; 255
    11e8:	ec f3       	brlt	.-6      	; 0x11e4 <__divsf3_pse+0x6a>
    11ea:	98 3e       	cpi	r25, 0xE8	; 232
    11ec:	dc f3       	brlt	.-10     	; 0x11e4 <__divsf3_pse+0x6a>
    11ee:	86 95       	lsr	r24
    11f0:	77 95       	ror	r23
    11f2:	67 95       	ror	r22
    11f4:	b7 95       	ror	r27
    11f6:	f7 95       	ror	r31
    11f8:	9f 5f       	subi	r25, 0xFF	; 255
    11fa:	c9 f7       	brne	.-14     	; 0x11ee <__divsf3_pse+0x74>
    11fc:	88 0f       	add	r24, r24
    11fe:	91 1d       	adc	r25, r1
    1200:	96 95       	lsr	r25
    1202:	87 95       	ror	r24
    1204:	97 f9       	bld	r25, 7
    1206:	08 95       	ret
    1208:	e1 e0       	ldi	r30, 0x01	; 1
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	88 1f       	adc	r24, r24
    1210:	bb 1f       	adc	r27, r27
    1212:	62 17       	cp	r22, r18
    1214:	73 07       	cpc	r23, r19
    1216:	84 07       	cpc	r24, r20
    1218:	ba 07       	cpc	r27, r26
    121a:	20 f0       	brcs	.+8      	; 0x1224 <__divsf3_pse+0xaa>
    121c:	62 1b       	sub	r22, r18
    121e:	73 0b       	sbc	r23, r19
    1220:	84 0b       	sbc	r24, r20
    1222:	ba 0b       	sbc	r27, r26
    1224:	ee 1f       	adc	r30, r30
    1226:	88 f7       	brcc	.-30     	; 0x120a <__divsf3_pse+0x90>
    1228:	e0 95       	com	r30
    122a:	08 95       	ret

0000122c <__fixsfsi>:
    122c:	04 d0       	rcall	.+8      	; 0x1236 <__fixunssfsi>
    122e:	68 94       	set
    1230:	b1 11       	cpse	r27, r1
    1232:	08 c1       	rjmp	.+528    	; 0x1444 <__fp_szero>
    1234:	08 95       	ret

00001236 <__fixunssfsi>:
    1236:	d4 d0       	rcall	.+424    	; 0x13e0 <__fp_splitA>
    1238:	88 f0       	brcs	.+34     	; 0x125c <__fixunssfsi+0x26>
    123a:	9f 57       	subi	r25, 0x7F	; 127
    123c:	90 f0       	brcs	.+36     	; 0x1262 <__fixunssfsi+0x2c>
    123e:	b9 2f       	mov	r27, r25
    1240:	99 27       	eor	r25, r25
    1242:	b7 51       	subi	r27, 0x17	; 23
    1244:	a0 f0       	brcs	.+40     	; 0x126e <__fixunssfsi+0x38>
    1246:	d1 f0       	breq	.+52     	; 0x127c <__fixunssfsi+0x46>
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	1a f0       	brmi	.+6      	; 0x1258 <__fixunssfsi+0x22>
    1252:	ba 95       	dec	r27
    1254:	c9 f7       	brne	.-14     	; 0x1248 <__fixunssfsi+0x12>
    1256:	12 c0       	rjmp	.+36     	; 0x127c <__fixunssfsi+0x46>
    1258:	b1 30       	cpi	r27, 0x01	; 1
    125a:	81 f0       	breq	.+32     	; 0x127c <__fixunssfsi+0x46>
    125c:	f2 d0       	rcall	.+484    	; 0x1442 <__fp_zero>
    125e:	b1 e0       	ldi	r27, 0x01	; 1
    1260:	08 95       	ret
    1262:	ef c0       	rjmp	.+478    	; 0x1442 <__fp_zero>
    1264:	67 2f       	mov	r22, r23
    1266:	78 2f       	mov	r23, r24
    1268:	88 27       	eor	r24, r24
    126a:	b8 5f       	subi	r27, 0xF8	; 248
    126c:	39 f0       	breq	.+14     	; 0x127c <__fixunssfsi+0x46>
    126e:	b9 3f       	cpi	r27, 0xF9	; 249
    1270:	cc f3       	brlt	.-14     	; 0x1264 <__fixunssfsi+0x2e>
    1272:	86 95       	lsr	r24
    1274:	77 95       	ror	r23
    1276:	67 95       	ror	r22
    1278:	b3 95       	inc	r27
    127a:	d9 f7       	brne	.-10     	; 0x1272 <__fixunssfsi+0x3c>
    127c:	3e f4       	brtc	.+14     	; 0x128c <__fixunssfsi+0x56>
    127e:	90 95       	com	r25
    1280:	80 95       	com	r24
    1282:	70 95       	com	r23
    1284:	61 95       	neg	r22
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	8f 4f       	sbci	r24, 0xFF	; 255
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	08 95       	ret

0000128e <__floatunsisf>:
    128e:	e8 94       	clt
    1290:	09 c0       	rjmp	.+18     	; 0x12a4 <__floatsisf+0x12>

00001292 <__floatsisf>:
    1292:	97 fb       	bst	r25, 7
    1294:	3e f4       	brtc	.+14     	; 0x12a4 <__floatsisf+0x12>
    1296:	90 95       	com	r25
    1298:	80 95       	com	r24
    129a:	70 95       	com	r23
    129c:	61 95       	neg	r22
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	8f 4f       	sbci	r24, 0xFF	; 255
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	99 23       	and	r25, r25
    12a6:	a9 f0       	breq	.+42     	; 0x12d2 <__floatsisf+0x40>
    12a8:	f9 2f       	mov	r31, r25
    12aa:	96 e9       	ldi	r25, 0x96	; 150
    12ac:	bb 27       	eor	r27, r27
    12ae:	93 95       	inc	r25
    12b0:	f6 95       	lsr	r31
    12b2:	87 95       	ror	r24
    12b4:	77 95       	ror	r23
    12b6:	67 95       	ror	r22
    12b8:	b7 95       	ror	r27
    12ba:	f1 11       	cpse	r31, r1
    12bc:	f8 cf       	rjmp	.-16     	; 0x12ae <__floatsisf+0x1c>
    12be:	fa f4       	brpl	.+62     	; 0x12fe <__floatsisf+0x6c>
    12c0:	bb 0f       	add	r27, r27
    12c2:	11 f4       	brne	.+4      	; 0x12c8 <__floatsisf+0x36>
    12c4:	60 ff       	sbrs	r22, 0
    12c6:	1b c0       	rjmp	.+54     	; 0x12fe <__floatsisf+0x6c>
    12c8:	6f 5f       	subi	r22, 0xFF	; 255
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	16 c0       	rjmp	.+44     	; 0x12fe <__floatsisf+0x6c>
    12d2:	88 23       	and	r24, r24
    12d4:	11 f0       	breq	.+4      	; 0x12da <__floatsisf+0x48>
    12d6:	96 e9       	ldi	r25, 0x96	; 150
    12d8:	11 c0       	rjmp	.+34     	; 0x12fc <__floatsisf+0x6a>
    12da:	77 23       	and	r23, r23
    12dc:	21 f0       	breq	.+8      	; 0x12e6 <__floatsisf+0x54>
    12de:	9e e8       	ldi	r25, 0x8E	; 142
    12e0:	87 2f       	mov	r24, r23
    12e2:	76 2f       	mov	r23, r22
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <__floatsisf+0x5e>
    12e6:	66 23       	and	r22, r22
    12e8:	71 f0       	breq	.+28     	; 0x1306 <__floatsisf+0x74>
    12ea:	96 e8       	ldi	r25, 0x86	; 134
    12ec:	86 2f       	mov	r24, r22
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	2a f0       	brmi	.+10     	; 0x12fe <__floatsisf+0x6c>
    12f4:	9a 95       	dec	r25
    12f6:	66 0f       	add	r22, r22
    12f8:	77 1f       	adc	r23, r23
    12fa:	88 1f       	adc	r24, r24
    12fc:	da f7       	brpl	.-10     	; 0x12f4 <__floatsisf+0x62>
    12fe:	88 0f       	add	r24, r24
    1300:	96 95       	lsr	r25
    1302:	87 95       	ror	r24
    1304:	97 f9       	bld	r25, 7
    1306:	08 95       	ret

00001308 <floor>:
    1308:	85 d0       	rcall	.+266    	; 0x1414 <__fp_trunc>
    130a:	80 f0       	brcs	.+32     	; 0x132c <floor+0x24>
    130c:	9f 37       	cpi	r25, 0x7F	; 127
    130e:	40 f4       	brcc	.+16     	; 0x1320 <floor+0x18>
    1310:	91 11       	cpse	r25, r1
    1312:	0e f0       	brts	.+2      	; 0x1316 <floor+0xe>
    1314:	97 c0       	rjmp	.+302    	; 0x1444 <__fp_szero>
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	80 e8       	ldi	r24, 0x80	; 128
    131c:	9f eb       	ldi	r25, 0xBF	; 191
    131e:	08 95       	ret
    1320:	26 f4       	brtc	.+8      	; 0x132a <floor+0x22>
    1322:	1b 16       	cp	r1, r27
    1324:	61 1d       	adc	r22, r1
    1326:	71 1d       	adc	r23, r1
    1328:	81 1d       	adc	r24, r1
    132a:	07 c0       	rjmp	.+14     	; 0x133a <__fp_mintl>
    132c:	21 c0       	rjmp	.+66     	; 0x1370 <__fp_mpack>

0000132e <__fp_inf>:
    132e:	97 f9       	bld	r25, 7
    1330:	9f 67       	ori	r25, 0x7F	; 127
    1332:	80 e8       	ldi	r24, 0x80	; 128
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	08 95       	ret

0000133a <__fp_mintl>:
    133a:	88 23       	and	r24, r24
    133c:	71 f4       	brne	.+28     	; 0x135a <__fp_mintl+0x20>
    133e:	77 23       	and	r23, r23
    1340:	21 f0       	breq	.+8      	; 0x134a <__fp_mintl+0x10>
    1342:	98 50       	subi	r25, 0x08	; 8
    1344:	87 2b       	or	r24, r23
    1346:	76 2f       	mov	r23, r22
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <__fp_mintl+0x1e>
    134a:	66 23       	and	r22, r22
    134c:	11 f4       	brne	.+4      	; 0x1352 <__fp_mintl+0x18>
    134e:	99 27       	eor	r25, r25
    1350:	0d c0       	rjmp	.+26     	; 0x136c <__fp_mintl+0x32>
    1352:	90 51       	subi	r25, 0x10	; 16
    1354:	86 2b       	or	r24, r22
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	2a f0       	brmi	.+10     	; 0x1366 <__fp_mintl+0x2c>
    135c:	9a 95       	dec	r25
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	88 1f       	adc	r24, r24
    1364:	da f7       	brpl	.-10     	; 0x135c <__fp_mintl+0x22>
    1366:	88 0f       	add	r24, r24
    1368:	96 95       	lsr	r25
    136a:	87 95       	ror	r24
    136c:	97 f9       	bld	r25, 7
    136e:	08 95       	ret

00001370 <__fp_mpack>:
    1370:	9f 3f       	cpi	r25, 0xFF	; 255
    1372:	31 f0       	breq	.+12     	; 0x1380 <__fp_mpack_finite+0xc>

00001374 <__fp_mpack_finite>:
    1374:	91 50       	subi	r25, 0x01	; 1
    1376:	20 f4       	brcc	.+8      	; 0x1380 <__fp_mpack_finite+0xc>
    1378:	87 95       	ror	r24
    137a:	77 95       	ror	r23
    137c:	67 95       	ror	r22
    137e:	b7 95       	ror	r27
    1380:	88 0f       	add	r24, r24
    1382:	91 1d       	adc	r25, r1
    1384:	96 95       	lsr	r25
    1386:	87 95       	ror	r24
    1388:	97 f9       	bld	r25, 7
    138a:	08 95       	ret

0000138c <__fp_nan>:
    138c:	9f ef       	ldi	r25, 0xFF	; 255
    138e:	80 ec       	ldi	r24, 0xC0	; 192
    1390:	08 95       	ret

00001392 <__fp_pscA>:
    1392:	00 24       	eor	r0, r0
    1394:	0a 94       	dec	r0
    1396:	16 16       	cp	r1, r22
    1398:	17 06       	cpc	r1, r23
    139a:	18 06       	cpc	r1, r24
    139c:	09 06       	cpc	r0, r25
    139e:	08 95       	ret

000013a0 <__fp_pscB>:
    13a0:	00 24       	eor	r0, r0
    13a2:	0a 94       	dec	r0
    13a4:	12 16       	cp	r1, r18
    13a6:	13 06       	cpc	r1, r19
    13a8:	14 06       	cpc	r1, r20
    13aa:	05 06       	cpc	r0, r21
    13ac:	08 95       	ret

000013ae <__fp_round>:
    13ae:	09 2e       	mov	r0, r25
    13b0:	03 94       	inc	r0
    13b2:	00 0c       	add	r0, r0
    13b4:	11 f4       	brne	.+4      	; 0x13ba <__fp_round+0xc>
    13b6:	88 23       	and	r24, r24
    13b8:	52 f0       	brmi	.+20     	; 0x13ce <__fp_round+0x20>
    13ba:	bb 0f       	add	r27, r27
    13bc:	40 f4       	brcc	.+16     	; 0x13ce <__fp_round+0x20>
    13be:	bf 2b       	or	r27, r31
    13c0:	11 f4       	brne	.+4      	; 0x13c6 <__fp_round+0x18>
    13c2:	60 ff       	sbrs	r22, 0
    13c4:	04 c0       	rjmp	.+8      	; 0x13ce <__fp_round+0x20>
    13c6:	6f 5f       	subi	r22, 0xFF	; 255
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	8f 4f       	sbci	r24, 0xFF	; 255
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	08 95       	ret

000013d0 <__fp_split3>:
    13d0:	57 fd       	sbrc	r21, 7
    13d2:	90 58       	subi	r25, 0x80	; 128
    13d4:	44 0f       	add	r20, r20
    13d6:	55 1f       	adc	r21, r21
    13d8:	59 f0       	breq	.+22     	; 0x13f0 <__fp_splitA+0x10>
    13da:	5f 3f       	cpi	r21, 0xFF	; 255
    13dc:	71 f0       	breq	.+28     	; 0x13fa <__fp_splitA+0x1a>
    13de:	47 95       	ror	r20

000013e0 <__fp_splitA>:
    13e0:	88 0f       	add	r24, r24
    13e2:	97 fb       	bst	r25, 7
    13e4:	99 1f       	adc	r25, r25
    13e6:	61 f0       	breq	.+24     	; 0x1400 <__fp_splitA+0x20>
    13e8:	9f 3f       	cpi	r25, 0xFF	; 255
    13ea:	79 f0       	breq	.+30     	; 0x140a <__fp_splitA+0x2a>
    13ec:	87 95       	ror	r24
    13ee:	08 95       	ret
    13f0:	12 16       	cp	r1, r18
    13f2:	13 06       	cpc	r1, r19
    13f4:	14 06       	cpc	r1, r20
    13f6:	55 1f       	adc	r21, r21
    13f8:	f2 cf       	rjmp	.-28     	; 0x13de <__fp_split3+0xe>
    13fa:	46 95       	lsr	r20
    13fc:	f1 df       	rcall	.-30     	; 0x13e0 <__fp_splitA>
    13fe:	08 c0       	rjmp	.+16     	; 0x1410 <__fp_splitA+0x30>
    1400:	16 16       	cp	r1, r22
    1402:	17 06       	cpc	r1, r23
    1404:	18 06       	cpc	r1, r24
    1406:	99 1f       	adc	r25, r25
    1408:	f1 cf       	rjmp	.-30     	; 0x13ec <__fp_splitA+0xc>
    140a:	86 95       	lsr	r24
    140c:	71 05       	cpc	r23, r1
    140e:	61 05       	cpc	r22, r1
    1410:	08 94       	sec
    1412:	08 95       	ret

00001414 <__fp_trunc>:
    1414:	e5 df       	rcall	.-54     	; 0x13e0 <__fp_splitA>
    1416:	a0 f0       	brcs	.+40     	; 0x1440 <__fp_trunc+0x2c>
    1418:	be e7       	ldi	r27, 0x7E	; 126
    141a:	b9 17       	cp	r27, r25
    141c:	88 f4       	brcc	.+34     	; 0x1440 <__fp_trunc+0x2c>
    141e:	bb 27       	eor	r27, r27
    1420:	9f 38       	cpi	r25, 0x8F	; 143
    1422:	60 f4       	brcc	.+24     	; 0x143c <__fp_trunc+0x28>
    1424:	16 16       	cp	r1, r22
    1426:	b1 1d       	adc	r27, r1
    1428:	67 2f       	mov	r22, r23
    142a:	78 2f       	mov	r23, r24
    142c:	88 27       	eor	r24, r24
    142e:	98 5f       	subi	r25, 0xF8	; 248
    1430:	f7 cf       	rjmp	.-18     	; 0x1420 <__fp_trunc+0xc>
    1432:	86 95       	lsr	r24
    1434:	77 95       	ror	r23
    1436:	67 95       	ror	r22
    1438:	b1 1d       	adc	r27, r1
    143a:	93 95       	inc	r25
    143c:	96 39       	cpi	r25, 0x96	; 150
    143e:	c8 f3       	brcs	.-14     	; 0x1432 <__fp_trunc+0x1e>
    1440:	08 95       	ret

00001442 <__fp_zero>:
    1442:	e8 94       	clt

00001444 <__fp_szero>:
    1444:	bb 27       	eor	r27, r27
    1446:	66 27       	eor	r22, r22
    1448:	77 27       	eor	r23, r23
    144a:	cb 01       	movw	r24, r22
    144c:	97 f9       	bld	r25, 7
    144e:	08 95       	ret

00001450 <__mulsf3>:
    1450:	0b d0       	rcall	.+22     	; 0x1468 <__mulsf3x>
    1452:	ad cf       	rjmp	.-166    	; 0x13ae <__fp_round>
    1454:	9e df       	rcall	.-196    	; 0x1392 <__fp_pscA>
    1456:	28 f0       	brcs	.+10     	; 0x1462 <__mulsf3+0x12>
    1458:	a3 df       	rcall	.-186    	; 0x13a0 <__fp_pscB>
    145a:	18 f0       	brcs	.+6      	; 0x1462 <__mulsf3+0x12>
    145c:	95 23       	and	r25, r21
    145e:	09 f0       	breq	.+2      	; 0x1462 <__mulsf3+0x12>
    1460:	66 cf       	rjmp	.-308    	; 0x132e <__fp_inf>
    1462:	94 cf       	rjmp	.-216    	; 0x138c <__fp_nan>
    1464:	11 24       	eor	r1, r1
    1466:	ee cf       	rjmp	.-36     	; 0x1444 <__fp_szero>

00001468 <__mulsf3x>:
    1468:	b3 df       	rcall	.-154    	; 0x13d0 <__fp_split3>
    146a:	a0 f3       	brcs	.-24     	; 0x1454 <__mulsf3+0x4>

0000146c <__mulsf3_pse>:
    146c:	95 9f       	mul	r25, r21
    146e:	d1 f3       	breq	.-12     	; 0x1464 <__mulsf3+0x14>
    1470:	95 0f       	add	r25, r21
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	55 1f       	adc	r21, r21
    1476:	62 9f       	mul	r22, r18
    1478:	f0 01       	movw	r30, r0
    147a:	72 9f       	mul	r23, r18
    147c:	bb 27       	eor	r27, r27
    147e:	f0 0d       	add	r31, r0
    1480:	b1 1d       	adc	r27, r1
    1482:	63 9f       	mul	r22, r19
    1484:	aa 27       	eor	r26, r26
    1486:	f0 0d       	add	r31, r0
    1488:	b1 1d       	adc	r27, r1
    148a:	aa 1f       	adc	r26, r26
    148c:	64 9f       	mul	r22, r20
    148e:	66 27       	eor	r22, r22
    1490:	b0 0d       	add	r27, r0
    1492:	a1 1d       	adc	r26, r1
    1494:	66 1f       	adc	r22, r22
    1496:	82 9f       	mul	r24, r18
    1498:	22 27       	eor	r18, r18
    149a:	b0 0d       	add	r27, r0
    149c:	a1 1d       	adc	r26, r1
    149e:	62 1f       	adc	r22, r18
    14a0:	73 9f       	mul	r23, r19
    14a2:	b0 0d       	add	r27, r0
    14a4:	a1 1d       	adc	r26, r1
    14a6:	62 1f       	adc	r22, r18
    14a8:	83 9f       	mul	r24, r19
    14aa:	a0 0d       	add	r26, r0
    14ac:	61 1d       	adc	r22, r1
    14ae:	22 1f       	adc	r18, r18
    14b0:	74 9f       	mul	r23, r20
    14b2:	33 27       	eor	r19, r19
    14b4:	a0 0d       	add	r26, r0
    14b6:	61 1d       	adc	r22, r1
    14b8:	23 1f       	adc	r18, r19
    14ba:	84 9f       	mul	r24, r20
    14bc:	60 0d       	add	r22, r0
    14be:	21 1d       	adc	r18, r1
    14c0:	82 2f       	mov	r24, r18
    14c2:	76 2f       	mov	r23, r22
    14c4:	6a 2f       	mov	r22, r26
    14c6:	11 24       	eor	r1, r1
    14c8:	9f 57       	subi	r25, 0x7F	; 127
    14ca:	50 40       	sbci	r21, 0x00	; 0
    14cc:	8a f0       	brmi	.+34     	; 0x14f0 <__mulsf3_pse+0x84>
    14ce:	e1 f0       	breq	.+56     	; 0x1508 <__mulsf3_pse+0x9c>
    14d0:	88 23       	and	r24, r24
    14d2:	4a f0       	brmi	.+18     	; 0x14e6 <__mulsf3_pse+0x7a>
    14d4:	ee 0f       	add	r30, r30
    14d6:	ff 1f       	adc	r31, r31
    14d8:	bb 1f       	adc	r27, r27
    14da:	66 1f       	adc	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	88 1f       	adc	r24, r24
    14e0:	91 50       	subi	r25, 0x01	; 1
    14e2:	50 40       	sbci	r21, 0x00	; 0
    14e4:	a9 f7       	brne	.-22     	; 0x14d0 <__mulsf3_pse+0x64>
    14e6:	9e 3f       	cpi	r25, 0xFE	; 254
    14e8:	51 05       	cpc	r21, r1
    14ea:	70 f0       	brcs	.+28     	; 0x1508 <__mulsf3_pse+0x9c>
    14ec:	20 cf       	rjmp	.-448    	; 0x132e <__fp_inf>
    14ee:	aa cf       	rjmp	.-172    	; 0x1444 <__fp_szero>
    14f0:	5f 3f       	cpi	r21, 0xFF	; 255
    14f2:	ec f3       	brlt	.-6      	; 0x14ee <__mulsf3_pse+0x82>
    14f4:	98 3e       	cpi	r25, 0xE8	; 232
    14f6:	dc f3       	brlt	.-10     	; 0x14ee <__mulsf3_pse+0x82>
    14f8:	86 95       	lsr	r24
    14fa:	77 95       	ror	r23
    14fc:	67 95       	ror	r22
    14fe:	b7 95       	ror	r27
    1500:	f7 95       	ror	r31
    1502:	e7 95       	ror	r30
    1504:	9f 5f       	subi	r25, 0xFF	; 255
    1506:	c1 f7       	brne	.-16     	; 0x14f8 <__mulsf3_pse+0x8c>
    1508:	fe 2b       	or	r31, r30
    150a:	88 0f       	add	r24, r24
    150c:	91 1d       	adc	r25, r1
    150e:	96 95       	lsr	r25
    1510:	87 95       	ror	r24
    1512:	97 f9       	bld	r25, 7
    1514:	08 95       	ret

00001516 <__divmodhi4>:
    1516:	97 fb       	bst	r25, 7
    1518:	07 2e       	mov	r0, r23
    151a:	16 f4       	brtc	.+4      	; 0x1520 <__divmodhi4+0xa>
    151c:	00 94       	com	r0
    151e:	07 d0       	rcall	.+14     	; 0x152e <__divmodhi4_neg1>
    1520:	77 fd       	sbrc	r23, 7
    1522:	09 d0       	rcall	.+18     	; 0x1536 <__divmodhi4_neg2>
    1524:	0e 94 ae 0a 	call	0x155c	; 0x155c <__udivmodhi4>
    1528:	07 fc       	sbrc	r0, 7
    152a:	05 d0       	rcall	.+10     	; 0x1536 <__divmodhi4_neg2>
    152c:	3e f4       	brtc	.+14     	; 0x153c <__divmodhi4_exit>

0000152e <__divmodhi4_neg1>:
    152e:	90 95       	com	r25
    1530:	81 95       	neg	r24
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	08 95       	ret

00001536 <__divmodhi4_neg2>:
    1536:	70 95       	com	r23
    1538:	61 95       	neg	r22
    153a:	7f 4f       	sbci	r23, 0xFF	; 255

0000153c <__divmodhi4_exit>:
    153c:	08 95       	ret

0000153e <__umulhisi3>:
    153e:	a2 9f       	mul	r26, r18
    1540:	b0 01       	movw	r22, r0
    1542:	b3 9f       	mul	r27, r19
    1544:	c0 01       	movw	r24, r0
    1546:	a3 9f       	mul	r26, r19
    1548:	70 0d       	add	r23, r0
    154a:	81 1d       	adc	r24, r1
    154c:	11 24       	eor	r1, r1
    154e:	91 1d       	adc	r25, r1
    1550:	b2 9f       	mul	r27, r18
    1552:	70 0d       	add	r23, r0
    1554:	81 1d       	adc	r24, r1
    1556:	11 24       	eor	r1, r1
    1558:	91 1d       	adc	r25, r1
    155a:	08 95       	ret

0000155c <__udivmodhi4>:
    155c:	aa 1b       	sub	r26, r26
    155e:	bb 1b       	sub	r27, r27
    1560:	51 e1       	ldi	r21, 0x11	; 17
    1562:	07 c0       	rjmp	.+14     	; 0x1572 <__udivmodhi4_ep>

00001564 <__udivmodhi4_loop>:
    1564:	aa 1f       	adc	r26, r26
    1566:	bb 1f       	adc	r27, r27
    1568:	a6 17       	cp	r26, r22
    156a:	b7 07       	cpc	r27, r23
    156c:	10 f0       	brcs	.+4      	; 0x1572 <__udivmodhi4_ep>
    156e:	a6 1b       	sub	r26, r22
    1570:	b7 0b       	sbc	r27, r23

00001572 <__udivmodhi4_ep>:
    1572:	88 1f       	adc	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	5a 95       	dec	r21
    1578:	a9 f7       	brne	.-22     	; 0x1564 <__udivmodhi4_loop>
    157a:	80 95       	com	r24
    157c:	90 95       	com	r25
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	08 95       	ret

00001584 <_exit>:
    1584:	f8 94       	cli

00001586 <__stop_program>:
    1586:	ff cf       	rjmp	.-2      	; 0x1586 <__stop_program>
